/* tslint:disable */
/* eslint-disable */
/**
 * IM CXM APIs Documentation
 * IM CXM OpenApi description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddSetting201Response
 */
export interface AddSetting201Response {
    /**
     * 
     * @type {Array<Setting>}
     * @memberof AddSetting201Response
     */
    'settings'?: Array<Setting>;
}
/**
 * 
 * @export
 * @interface AddSettingRequest
 */
export interface AddSettingRequest {
    /**
     * 
     * @type {Array<AddSettingRequestSettingsInner>}
     * @memberof AddSettingRequest
     */
    'settings'?: Array<AddSettingRequestSettingsInner>;
}
/**
 * 
 * @export
 * @interface AddSettingRequestSettingsInner
 */
export interface AddSettingRequestSettingsInner {
    /**
     * 
     * @type {string}
     * @memberof AddSettingRequestSettingsInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddSettingRequestSettingsInner
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddSettingRequestSettingsInner
     */
    'value'?: string;
}
/**
 * Adventure model
 * @export
 * @interface Adventure
 */
export interface Adventure {
    /**
     * 
     * @type {number}
     * @memberof Adventure
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Adventure
     */
    'region_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Adventure
     */
    'country_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Adventure
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Adventure
     */
    'highlights'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Adventure
     */
    'testimonial'?: string;
    /**
     * 
     * @type {string}
     * @memberof Adventure
     */
    'client_name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Adventure
     */
    'slide_urls'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Adventure
     */
    'map_url'?: string;
}
/**
 * 
 * @export
 * @interface AdventureList200Response
 */
export interface AdventureList200Response {
    /**
     * 
     * @type {Array<AdventureResource>}
     * @memberof AdventureList200Response
     */
    'data'?: Array<AdventureResource>;
}
/**
 * Adventure Resource model
 * @export
 * @interface AdventureResource
 */
export interface AdventureResource {
    /**
     * 
     * @type {number}
     * @memberof AdventureResource
     */
    'id'?: number;
    /**
     * 
     * @type {AdventureResourceRegion}
     * @memberof AdventureResource
     */
    'region'?: AdventureResourceRegion;
    /**
     * 
     * @type {string}
     * @memberof AdventureResource
     */
    'country_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdventureResource
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdventureResource
     */
    'highlights'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AdventureResource
     */
    'testimonial'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdventureResource
     */
    'client_name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdventureResource
     */
    'slides'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AdventureResource
     */
    'map_url'?: string;
}
/**
 * 
 * @export
 * @interface AdventureResourceRegion
 */
export interface AdventureResourceRegion {
    /**
     * 
     * @type {number}
     * @memberof AdventureResourceRegion
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdventureResourceRegion
     */
    'name'?: string;
}
/**
 * Asset model
 * @export
 * @interface Asset
 */
export interface Asset {
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'extension'?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'thumb'?: string;
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    'brand_id'?: number;
}
/**
 * 
 * @export
 * @interface AssetList200Response
 */
export interface AssetList200Response {
    /**
     * 
     * @type {Array<AssetResource>}
     * @memberof AssetList200Response
     */
    'data'?: Array<AssetResource>;
}
/**
 * Asset Resource model
 * @export
 * @interface AssetResource
 */
export interface AssetResource {
    /**
     * 
     * @type {number}
     * @memberof AssetResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssetResource
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetResource
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetResource
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetResource
     */
    'extension'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetResource
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetResource
     */
    'thumb'?: string;
    /**
     * 
     * @type {number}
     * @memberof AssetResource
     */
    'brand_id'?: number;
}
/**
 * Block model
 * @export
 * @interface Block
 */
export interface Block {
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    'category_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    'image'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof Block
     */
    'structure'?: Array<object>;
}
/**
 * 
 * @export
 * @interface BlockList200Response
 */
export interface BlockList200Response {
    /**
     * 
     * @type {Array<BlockResource>}
     * @memberof BlockList200Response
     */
    'data'?: Array<BlockResource>;
}
/**
 * Block page model
 * @export
 * @interface BlockPage
 */
export interface BlockPage {
    /**
     * 
     * @type {number}
     * @memberof BlockPage
     */
    'page_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof BlockPage
     */
    'block_id'?: number;
    /**
     * 
     * @type {object}
     * @memberof BlockPage
     */
    'props'?: object;
    /**
     * 
     * @type {number}
     * @memberof BlockPage
     */
    'order'?: number;
}
/**
 * Block page Resource model
 * @export
 * @interface BlockPageResource
 */
export interface BlockPageResource {
    /**
     * 
     * @type {number}
     * @memberof BlockPageResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlockPageResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockPageResource
     */
    'category_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockPageResource
     */
    'image'?: string;
    /**
     * 
     * @type {object}
     * @memberof BlockPageResource
     */
    'structure'?: object;
    /**
     * 
     * @type {number}
     * @memberof BlockPageResource
     */
    'order'?: number;
    /**
     * 
     * @type {object}
     * @memberof BlockPageResource
     */
    'props'?: object;
}
/**
 * Block Resource model
 * @export
 * @interface BlockResource
 */
export interface BlockResource {
    /**
     * 
     * @type {number}
     * @memberof BlockResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlockResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockResource
     */
    'category_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockResource
     */
    'image'?: string;
    /**
     * 
     * @type {object}
     * @memberof BlockResource
     */
    'structure'?: object;
}
/**
 * Category model
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'brand_id'?: number;
}
/**
 * Category Resource model
 * @export
 * @interface CategoryResource
 */
export interface CategoryResource {
    /**
     * 
     * @type {number}
     * @memberof CategoryResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryResource
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CategoryResource
     */
    'brand_id'?: number;
}
/**
 * 
 * @export
 * @interface Cf600ec9f1950b8dd71b7f1dc100d49d200Response
 */
export interface Cf600ec9f1950b8dd71b7f1dc100d49d200Response {
    /**
     * 
     * @type {Array<StatusResource>}
     * @memberof Cf600ec9f1950b8dd71b7f1dc100d49d200Response
     */
    'data'?: Array<StatusResource>;
}
/**
 * Constant model
 * @export
 * @interface Constant
 */
export interface Constant {
    /**
     * 
     * @type {number}
     * @memberof Constant
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Constant
     */
    'site_name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Constant
     */
    'text'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ConstantList200Response
 */
export interface ConstantList200Response {
    /**
     * 
     * @type {Array<ConstantResource>}
     * @memberof ConstantList200Response
     */
    'data'?: Array<ConstantResource>;
}
/**
 * Constant Resource model
 * @export
 * @interface ConstantResource
 */
export interface ConstantResource {
    /**
     * 
     * @type {number}
     * @memberof ConstantResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ConstantResource
     */
    'site_name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConstantResource
     */
    'pages'?: Array<string>;
}
/**
 * Deploy model
 * @export
 * @interface Deploy
 */
export interface Deploy {
    /**
     * 
     * @type {number}
     * @memberof Deploy
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Deploy
     */
    'actions'?: number;
}
/**
 * Draft model
 * @export
 * @interface Draft
 */
export interface Draft {
    /**
     * 
     * @type {number}
     * @memberof Draft
     */
    'page_id'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof Draft
     */
    'page_draft'?: Array<object>;
}
/**
 * Duplicate model
 * @export
 * @interface Duplicate
 */
export interface Duplicate {
    /**
     * 
     * @type {number}
     * @memberof Duplicate
     */
    'page_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Duplicate
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Duplicate
     */
    'route'?: string;
    /**
     * 
     * @type {number}
     * @memberof Duplicate
     */
    'model_id'?: number;
}
/**
 * Dynamic Page Resource model
 * @export
 * @interface DynamicPageResource
 */
export interface DynamicPageResource {
    /**
     * 
     * @type {number}
     * @memberof DynamicPageResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DynamicPageResource
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof DynamicPageResource
     */
    'route'?: string;
    /**
     * 
     * @type {string}
     * @memberof DynamicPageResource
     */
    'redirect'?: string;
    /**
     * 
     * @type {number}
     * @memberof DynamicPageResource
     */
    'brand_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof DynamicPageResource
     */
    'model_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DynamicPageResource
     */
    'model_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof DynamicPageResource
     */
    'template_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof DynamicPageResource
     */
    'locked_by'?: number;
    /**
     * 
     * @type {AdventureResourceRegion}
     * @memberof DynamicPageResource
     */
    'status'?: AdventureResourceRegion;
    /**
     * 
     * @type {string}
     * @memberof DynamicPageResource
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DynamicPageResource
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface ErrorList200Response
 */
export interface ErrorList200Response {
    /**
     * 
     * @type {Array<ErrorResource>}
     * @memberof ErrorList200Response
     */
    'data'?: Array<ErrorResource>;
}
/**
 * Error Resource model
 * @export
 * @interface ErrorResource
 */
export interface ErrorResource {
    /**
     * 
     * @type {number}
     * @memberof ErrorResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorResource
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResource
     */
    'route'?: string;
    /**
     * 
     * @type {number}
     * @memberof ErrorResource
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorResource
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResource
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface GetAdventure200Response
 */
export interface GetAdventure200Response {
    /**
     * 
     * @type {AdventureResource}
     * @memberof GetAdventure200Response
     */
    'data'?: AdventureResource;
}
/**
 * 
 * @export
 * @interface GetAllPages200Response
 */
export interface GetAllPages200Response {
    /**
     * 
     * @type {HUSAPageListResource}
     * @memberof GetAllPages200Response
     */
    'data'?: HUSAPageListResource;
}
/**
 * 
 * @export
 * @interface GetAllPosts200Response
 */
export interface GetAllPosts200Response {
    /**
     * 
     * @type {HUSAPostResource}
     * @memberof GetAllPosts200Response
     */
    'data'?: HUSAPostResource;
}
/**
 * 
 * @export
 * @interface GetAsset200Response
 */
export interface GetAsset200Response {
    /**
     * 
     * @type {AssetResource}
     * @memberof GetAsset200Response
     */
    'data'?: AssetResource;
}
/**
 * 
 * @export
 * @interface GetBlock200Response
 */
export interface GetBlock200Response {
    /**
     * 
     * @type {BlockResource}
     * @memberof GetBlock200Response
     */
    'data'?: BlockResource;
}
/**
 * 
 * @export
 * @interface GetBlocksByPageId200Response
 */
export interface GetBlocksByPageId200Response {
    /**
     * 
     * @type {Array<BlockPageResource>}
     * @memberof GetBlocksByPageId200Response
     */
    'data'?: Array<BlockPageResource>;
}
/**
 * 
 * @export
 * @interface GetConstant200Response
 */
export interface GetConstant200Response {
    /**
     * 
     * @type {ConstantResource}
     * @memberof GetConstant200Response
     */
    'data'?: ConstantResource;
}
/**
 * 
 * @export
 * @interface GetError200Response
 */
export interface GetError200Response {
    /**
     * 
     * @type {ErrorResource}
     * @memberof GetError200Response
     */
    'data'?: ErrorResource;
}
/**
 * 
 * @export
 * @interface GetListDynamicPage200Response
 */
export interface GetListDynamicPage200Response {
    /**
     * 
     * @type {DynamicPageResource}
     * @memberof GetListDynamicPage200Response
     */
    'data'?: DynamicPageResource;
}
/**
 * 
 * @export
 * @interface GetMenu200Response
 */
export interface GetMenu200Response {
    /**
     * 
     * @type {MenuResource}
     * @memberof GetMenu200Response
     */
    'data'?: MenuResource;
}
/**
 * 
 * @export
 * @interface GetMenuList200Response
 */
export interface GetMenuList200Response {
    /**
     * 
     * @type {Array<HUSAMenuResource>}
     * @memberof GetMenuList200Response
     */
    'data'?: Array<HUSAMenuResource>;
}
/**
 * 
 * @export
 * @interface GetNotifications200Response
 */
export interface GetNotifications200Response {
    /**
     * 
     * @type {Array<Notification>}
     * @memberof GetNotifications200Response
     */
    'data'?: Array<Notification>;
}
/**
 * 
 * @export
 * @interface GetPageDraft200Response
 */
export interface GetPageDraft200Response {
    /**
     * 
     * @type {PageDraftResource}
     * @memberof GetPageDraft200Response
     */
    'data'?: PageDraftResource;
}
/**
 * 
 * @export
 * @interface GetPageInfo200Response
 */
export interface GetPageInfo200Response {
    /**
     * 
     * @type {PageResource}
     * @memberof GetPageInfo200Response
     */
    'data'?: PageResource;
}
/**
 * 
 * @export
 * @interface GetPaginatePosts200Response
 */
export interface GetPaginatePosts200Response {
    /**
     * 
     * @type {Array<HUSAPostResource>}
     * @memberof GetPaginatePosts200Response
     */
    'data'?: Array<HUSAPostResource>;
}
/**
 * 
 * @export
 * @interface GetPostById200Response
 */
export interface GetPostById200Response {
    /**
     * 
     * @type {PostResource}
     * @memberof GetPostById200Response
     */
    'data'?: PostResource;
}
/**
 * 
 * @export
 * @interface GetPostsByCategoryId200Response
 */
export interface GetPostsByCategoryId200Response {
    /**
     * 
     * @type {Array<PostResource>}
     * @memberof GetPostsByCategoryId200Response
     */
    'data'?: Array<PostResource>;
}
/**
 * 
 * @export
 * @interface GetProductInfo200Response
 */
export interface GetProductInfo200Response {
    /**
     * 
     * @type {ProductResource}
     * @memberof GetProductInfo200Response
     */
    'data'?: ProductResource;
}
/**
 * 
 * @export
 * @interface GetProductList200Response
 */
export interface GetProductList200Response {
    /**
     * 
     * @type {Array<ProductResource>}
     * @memberof GetProductList200Response
     */
    'data'?: Array<ProductResource>;
}
/**
 * 
 * @export
 * @interface GetRedirect200Response
 */
export interface GetRedirect200Response {
    /**
     * 
     * @type {RedirectResource}
     * @memberof GetRedirect200Response
     */
    'data'?: RedirectResource;
}
/**
 * 
 * @export
 * @interface GetRedirectList200Response
 */
export interface GetRedirectList200Response {
    /**
     * 
     * @type {Array<RedirectResource>}
     * @memberof GetRedirectList200Response
     */
    'data'?: Array<RedirectResource>;
}
/**
 * 
 * @export
 * @interface GetRegion200Response
 */
export interface GetRegion200Response {
    /**
     * 
     * @type {RegionResource}
     * @memberof GetRegion200Response
     */
    'data'?: RegionResource;
}
/**
 * 
 * @export
 * @interface GetRegionList200Response
 */
export interface GetRegionList200Response {
    /**
     * 
     * @type {Array<RegionResource>}
     * @memberof GetRegionList200Response
     */
    'data'?: Array<RegionResource>;
}
/**
 * 
 * @export
 * @interface GetRegions200Response
 */
export interface GetRegions200Response {
    /**
     * 
     * @type {Array<RegionFullResource>}
     * @memberof GetRegions200Response
     */
    'data'?: Array<RegionFullResource>;
}
/**
 * 
 * @export
 * @interface GetRule200Response
 */
export interface GetRule200Response {
    /**
     * 
     * @type {Rule}
     * @memberof GetRule200Response
     */
    'data'?: Rule;
}
/**
 * 
 * @export
 * @interface GetRulesBySiteId200Response
 */
export interface GetRulesBySiteId200Response {
    /**
     * 
     * @type {Array<RuleResource>}
     * @memberof GetRulesBySiteId200Response
     */
    'data'?: Array<RuleResource>;
}
/**
 * 
 * @export
 * @interface GetSection200Response
 */
export interface GetSection200Response {
    /**
     * 
     * @type {SectionResource}
     * @memberof GetSection200Response
     */
    'data'?: SectionResource;
}
/**
 * 
 * @export
 * @interface GetSetting200Response
 */
export interface GetSetting200Response {
    /**
     * 
     * @type {SettingResource}
     * @memberof GetSetting200Response
     */
    'data'?: SettingResource;
}
/**
 * 
 * @export
 * @interface GetSettingList200Response
 */
export interface GetSettingList200Response {
    /**
     * 
     * @type {Array<SettingResource>}
     * @memberof GetSettingList200Response
     */
    'data'?: Array<SettingResource>;
}
/**
 * 
 * @export
 * @interface GetSite200Response
 */
export interface GetSite200Response {
    /**
     * 
     * @type {SiteResource}
     * @memberof GetSite200Response
     */
    'data'?: SiteResource;
}
/**
 * 
 * @export
 * @interface GetSiteList200Response
 */
export interface GetSiteList200Response {
    /**
     * 
     * @type {Array<SiteResource>}
     * @memberof GetSiteList200Response
     */
    'data'?: Array<SiteResource>;
}
/**
 * 
 * @export
 * @interface GetTemplateInfo200Response
 */
export interface GetTemplateInfo200Response {
    /**
     * 
     * @type {TemplateResource}
     * @memberof GetTemplateInfo200Response
     */
    'data'?: TemplateResource;
}
/**
 * 
 * @export
 * @interface GetTemplateList200Response
 */
export interface GetTemplateList200Response {
    /**
     * 
     * @type {Array<HUSATemplateResource>}
     * @memberof GetTemplateList200Response
     */
    'data'?: Array<HUSATemplateResource>;
}
/**
 * HUSA Menu Resource model
 * @export
 * @interface HUSAMenuResource
 */
export interface HUSAMenuResource {
    /**
     * 
     * @type {number}
     * @memberof HUSAMenuResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HUSAMenuResource
     */
    'title'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof HUSAMenuResource
     */
    'widgets'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof HUSAMenuResource
     */
    'brand_id'?: number;
}
/**
 * Page List Resource model
 * @export
 * @interface HUSAPageListResource
 */
export interface HUSAPageListResource {
    /**
     * 
     * @type {number}
     * @memberof HUSAPageListResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HUSAPageListResource
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof HUSAPageListResource
     */
    'route'?: string;
    /**
     * 
     * @type {string}
     * @memberof HUSAPageListResource
     */
    'redirect'?: string;
    /**
     * 
     * @type {string}
     * @memberof HUSAPageListResource
     */
    'fetchUrl'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof HUSAPageListResource
     */
    'meta'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof HUSAPageListResource
     */
    'widgets'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof HUSAPageListResource
     */
    'brand_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof HUSAPageListResource
     */
    'model_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HUSAPageListResource
     */
    'model_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof HUSAPageListResource
     */
    'template_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof HUSAPageListResource
     */
    'locked_by'?: number;
    /**
     * 
     * @type {AdventureResourceRegion}
     * @memberof HUSAPageListResource
     */
    'status'?: AdventureResourceRegion;
    /**
     * 
     * @type {Array<HUSAPageListResourceNotificationsInner>}
     * @memberof HUSAPageListResource
     */
    'notifications'?: Array<HUSAPageListResourceNotificationsInner>;
    /**
     * 
     * @type {object}
     * @memberof HUSAPageListResource
     */
    'post'?: object;
}
/**
 * 
 * @export
 * @interface HUSAPageListResourceNotificationsInner
 */
export interface HUSAPageListResourceNotificationsInner {
    /**
     * 
     * @type {number}
     * @memberof HUSAPageListResourceNotificationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HUSAPageListResourceNotificationsInner
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof HUSAPageListResourceNotificationsInner
     */
    'text_color'?: string;
    /**
     * 
     * @type {string}
     * @memberof HUSAPageListResourceNotificationsInner
     */
    'background_color'?: string;
}
/**
 * HUSA Post Resource model
 * @export
 * @interface HUSAPostResource
 */
export interface HUSAPostResource {
    /**
     * 
     * @type {number}
     * @memberof HUSAPostResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HUSAPostResource
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof HUSAPostResource
     */
    'route'?: string;
    /**
     * 
     * @type {number}
     * @memberof HUSAPostResource
     */
    'category_id'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof HUSAPostResource
     */
    'widgets'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof HUSAPostResource
     */
    'brand_id'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof HUSAPostResource
     */
    'meta'?: Array<object>;
    /**
     * 
     * @type {Array<string>}
     * @memberof HUSAPostResource
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof HUSAPostResource
     */
    'status'?: number;
}
/**
 * HUSA Template Resource model
 * @export
 * @interface HUSATemplateResource
 */
export interface HUSATemplateResource {
    /**
     * 
     * @type {number}
     * @memberof HUSATemplateResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HUSATemplateResource
     */
    'name'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof HUSATemplateResource
     */
    'widgets'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof HUSATemplateResource
     */
    'brand_id'?: number;
}
/**
 * History model
 * @export
 * @interface History
 */
export interface History {
    /**
     * 
     * @type {number}
     * @memberof History
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof History
     */
    'model_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    'model_name'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof History
     */
    'widgets'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof History
     */
    'brand_id'?: number;
}
/**
 * HistoryRequest body data
 * @export
 * @interface HistoryRequest
 */
export interface HistoryRequest {
    /**
     * 
     * @type {number}
     * @memberof HistoryRequest
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HistoryRequest
     */
    'title'?: string;
}
/**
 * History Resource model
 * @export
 * @interface HistoryResource
 */
export interface HistoryResource {
    /**
     * 
     * @type {number}
     * @memberof HistoryResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HistoryResource
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof HistoryResource
     */
    'model_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HistoryResource
     */
    'model_name'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof HistoryResource
     */
    'widgets'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof HistoryResource
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof HistoryResource
     */
    'updated_at'?: string;
}
/**
 * Inquiry Resource model
 * @export
 * @interface InquiryResource
 */
export interface InquiryResource {
    /**
     * 
     * @type {string}
     * @memberof InquiryResource
     */
    'user_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InquiryResource
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof InquiryResource
     */
    'level'?: string;
    /**
     * 
     * @type {string}
     * @memberof InquiryResource
     */
    'application'?: string;
    /**
     * 
     * @type {Array<InquiryResourceBrandsInner>}
     * @memberof InquiryResource
     */
    'brands'?: Array<InquiryResourceBrandsInner>;
}
/**
 * 
 * @export
 * @interface InquiryResourceBrandsInner
 */
export interface InquiryResourceBrandsInner {
    /**
     * 
     * @type {InquiryResourceBrandsInnerBrand}
     * @memberof InquiryResourceBrandsInner
     */
    'brand'?: InquiryResourceBrandsInnerBrand;
}
/**
 * 
 * @export
 * @interface InquiryResourceBrandsInnerBrand
 */
export interface InquiryResourceBrandsInnerBrand {
    /**
     * 
     * @type {string}
     * @memberof InquiryResourceBrandsInnerBrand
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InquiryResourceBrandsInnerBrand
     */
    'logo'?: string;
}
/**
 * Login model
 * @export
 * @interface Login
 */
export interface Login {
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'password'?: string;
}
/**
 * Login Resource model
 * @export
 * @interface LoginResource
 */
export interface LoginResource {
    /**
     * 
     * @type {number}
     * @memberof LoginResource
     */
    'user_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LoginResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResource
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResource
     */
    'level'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResource
     */
    'access_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResource
     */
    'token_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResource
     */
    'expires_at'?: string;
}
/**
 * Menu model
 * @export
 * @interface Menu
 */
export interface Menu {
    /**
     * 
     * @type {number}
     * @memberof Menu
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Menu
     */
    'title'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof Menu
     */
    'widgets'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof Menu
     */
    'brand_id'?: number;
}
/**
 * 
 * @export
 * @interface MenuList200Response
 */
export interface MenuList200Response {
    /**
     * 
     * @type {Array<MenuResource>}
     * @memberof MenuList200Response
     */
    'data'?: Array<MenuResource>;
}
/**
 * Menu Resource model
 * @export
 * @interface MenuResource
 */
export interface MenuResource {
    /**
     * 
     * @type {number}
     * @memberof MenuResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MenuResource
     */
    'title'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof MenuResource
     */
    'widgets'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof MenuResource
     */
    'brand_id'?: number;
}
/**
 * 
 * @export
 * @interface Model062b0e17b0b265231ad33ece1785b1fe200Response
 */
export interface Model062b0e17b0b265231ad33ece1785b1fe200Response {
    /**
     * 
     * @type {Array<CategoryResource>}
     * @memberof Model062b0e17b0b265231ad33ece1785b1fe200Response
     */
    'data'?: Array<CategoryResource>;
}
/**
 * 
 * @export
 * @interface Model0fd985657bea3b2f3a919bdc16fec5b9200Response
 */
export interface Model0fd985657bea3b2f3a919bdc16fec5b9200Response {
    /**
     * 
     * @type {CategoryResource}
     * @memberof Model0fd985657bea3b2f3a919bdc16fec5b9200Response
     */
    'data'?: CategoryResource;
}
/**
 * 
 * @export
 * @interface Model828944b026e392e8a9d24e0e25d6ffed200Response
 */
export interface Model828944b026e392e8a9d24e0e25d6ffed200Response {
    /**
     * 
     * @type {StatusResource}
     * @memberof Model828944b026e392e8a9d24e0e25d6ffed200Response
     */
    'data'?: StatusResource;
}
/**
 * Error model
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'route'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'status'?: number;
}
/**
 * Notification model
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * 
     * @type {number}
     * @memberof Notification
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'link'?: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'text_color'?: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'background_color'?: string;
    /**
     * 
     * @type {number}
     * @memberof Notification
     */
    'brand_id'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof Notification
     */
    'page_Ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface NotificationList200Response
 */
export interface NotificationList200Response {
    /**
     * 
     * @type {Array<NotificationResource>}
     * @memberof NotificationList200Response
     */
    'data'?: Array<NotificationResource>;
}
/**
 * Notification Page model
 * @export
 * @interface NotificationPage
 */
export interface NotificationPage {
    /**
     * 
     * @type {number}
     * @memberof NotificationPage
     */
    'notification_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificationPage
     */
    'page_id'?: number;
}
/**
 * Notification Resource model
 * @export
 * @interface NotificationResource
 */
export interface NotificationResource {
    /**
     * 
     * @type {number}
     * @memberof NotificationResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof NotificationResource
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationResource
     */
    'link'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationResource
     */
    'text_color'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationResource
     */
    'background_color'?: string;
    /**
     * 
     * @type {number}
     * @memberof NotificationResource
     */
    'brand_id'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof NotificationResource
     */
    'page_Ids'?: Array<number>;
    /**
     * 
     * @type {Array<NotificationResourcePagesInner>}
     * @memberof NotificationResource
     */
    'pages'?: Array<NotificationResourcePagesInner>;
}
/**
 * 
 * @export
 * @interface NotificationResourcePagesInner
 */
export interface NotificationResourcePagesInner {
    /**
     * 
     * @type {string}
     * @memberof NotificationResourcePagesInner
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof NotificationResourcePagesInner
     */
    'title'?: number;
}
/**
 * Page model
 * @export
 * @interface Page
 */
export interface Page {
    /**
     * 
     * @type {number}
     * @memberof Page
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'route'?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'redirect'?: string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'fetchUrl'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof Page
     */
    'meta'?: Array<object>;
    /**
     * 
     * @type {Array<number>}
     * @memberof Page
     */
    'block_ids'?: Array<number>;
    /**
     * 
     * @type {Array<object>}
     * @memberof Page
     */
    'draft'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof Page
     */
    'widgets'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof Page
     */
    'brand_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Page
     */
    'model_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'model_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof Page
     */
    'template_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Page
     */
    'locked_by'?: number;
    /**
     * 
     * @type {number}
     * @memberof Page
     */
    'status_id'?: number;
}
/**
 * Page Draft Resource model
 * @export
 * @interface PageDraftResource
 */
export interface PageDraftResource {
    /**
     * 
     * @type {number}
     * @memberof PageDraftResource
     */
    'page_id'?: number;
    /**
     * 
     * @type {object}
     * @memberof PageDraftResource
     */
    'page_draft'?: object;
}
/**
 * Page Full Resource model
 * @export
 * @interface PageFullResource
 */
export interface PageFullResource {
    /**
     * 
     * @type {number}
     * @memberof PageFullResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PageFullResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageFullResource
     */
    'route'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageFullResource
     */
    'fetchUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageFullResource
     */
    'meta'?: string;
    /**
     * 
     * @type {Array<PageFullResourceBlocksInner>}
     * @memberof PageFullResource
     */
    'blocks'?: Array<PageFullResourceBlocksInner>;
}
/**
 * 
 * @export
 * @interface PageFullResourceBlocksInner
 */
export interface PageFullResourceBlocksInner {
    /**
     * 
     * @type {number}
     * @memberof PageFullResourceBlocksInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PageFullResourceBlocksInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof PageFullResourceBlocksInner
     */
    'category_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PageFullResourceBlocksInner
     */
    'image'?: string;
    /**
     * 
     * @type {object}
     * @memberof PageFullResourceBlocksInner
     */
    'structure'?: object;
    /**
     * 
     * @type {object}
     * @memberof PageFullResourceBlocksInner
     */
    'props'?: object;
}
/**
 * 
 * @export
 * @interface PageList200Response
 */
export interface PageList200Response {
    /**
     * 
     * @type {Array<PageResource>}
     * @memberof PageList200Response
     */
    'data'?: Array<PageResource>;
}
/**
 * Page List Resource model
 * @export
 * @interface PageListResource
 */
export interface PageListResource {
    /**
     * 
     * @type {number}
     * @memberof PageListResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PageListResource
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageListResource
     */
    'route'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageListResource
     */
    'redirect'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageListResource
     */
    'fetchUrl'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof PageListResource
     */
    'meta'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof PageListResource
     */
    'widgets'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof PageListResource
     */
    'brand_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageListResource
     */
    'model_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PageListResource
     */
    'model_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof PageListResource
     */
    'template_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageListResource
     */
    'locked_by'?: number;
    /**
     * 
     * @type {AdventureResourceRegion}
     * @memberof PageListResource
     */
    'status'?: AdventureResourceRegion;
    /**
     * 
     * @type {Array<HUSAPageListResourceNotificationsInner>}
     * @memberof PageListResource
     */
    'notifications'?: Array<HUSAPageListResourceNotificationsInner>;
    /**
     * 
     * @type {object}
     * @memberof PageListResource
     */
    'post'?: object;
}
/**
 * Page Resource model
 * @export
 * @interface PageResource
 */
export interface PageResource {
    /**
     * 
     * @type {number}
     * @memberof PageResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PageResource
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageResource
     */
    'route'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageResource
     */
    'redirect'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageResource
     */
    'fetchUrl'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof PageResource
     */
    'meta'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof PageResource
     */
    'draft'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof PageResource
     */
    'widgets'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof PageResource
     */
    'brand_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageResource
     */
    'model_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PageResource
     */
    'model_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof PageResource
     */
    'template_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageResource
     */
    'locked_by'?: number;
    /**
     * 
     * @type {AdventureResourceRegion}
     * @memberof PageResource
     */
    'status'?: AdventureResourceRegion;
    /**
     * 
     * @type {Array<HUSAPageListResourceNotificationsInner>}
     * @memberof PageResource
     */
    'notifications'?: Array<HUSAPageListResourceNotificationsInner>;
}
/**
 * Post model
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'route'?: string;
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    'category_id'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof Post
     */
    'widgets'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    'brand_id'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof Post
     */
    'meta'?: Array<object>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Post
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface PostList200Response
 */
export interface PostList200Response {
    /**
     * 
     * @type {Array<PostListResource>}
     * @memberof PostList200Response
     */
    'data'?: Array<PostListResource>;
}
/**
 * Post List Resource model
 * @export
 * @interface PostListResource
 */
export interface PostListResource {
    /**
     * 
     * @type {number}
     * @memberof PostListResource
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PostListResource
     */
    'category_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PostListResource
     */
    'brand_id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof PostListResource
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {object}
     * @memberof PostListResource
     */
    'page'?: object;
}
/**
 * Post Resource model
 * @export
 * @interface PostResource
 */
export interface PostResource {
    /**
     * 
     * @type {number}
     * @memberof PostResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostResource
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostResource
     */
    'route'?: string;
    /**
     * 
     * @type {number}
     * @memberof PostResource
     */
    'category_id'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof PostResource
     */
    'widgets'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof PostResource
     */
    'brand_id'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof PostResource
     */
    'meta'?: Array<object>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PostResource
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PostResource
     */
    'status'?: number;
}
/**
 * Product model
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'product_id'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof Product
     */
    'product_meta'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof Product
     */
    'product_content'?: Array<object>;
}
/**
 * Product Resource model
 * @export
 * @interface ProductResource
 */
export interface ProductResource {
    /**
     * 
     * @type {number}
     * @memberof ProductResource
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductResource
     */
    'product_id'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductResource
     */
    'product_meta'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductResource
     */
    'product_content'?: Array<object>;
}
/**
 * Redirect model
 * @export
 * @interface Redirect
 */
export interface Redirect {
    /**
     * 
     * @type {number}
     * @memberof Redirect
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Redirect
     */
    'page_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Redirect
     */
    'source_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Redirect
     */
    'redirect_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Redirect
     */
    'redirect_url'?: string;
    /**
     * 
     * @type {number}
     * @memberof Redirect
     */
    'redirect_code'?: number;
    /**
     * 
     * @type {string}
     * @memberof Redirect
     */
    'regex'?: string;
    /**
     * 
     * @type {number}
     * @memberof Redirect
     */
    'brand_id'?: number;
}
/**
 * Redirect Resource model
 * @export
 * @interface RedirectResource
 */
export interface RedirectResource {
    /**
     * 
     * @type {number}
     * @memberof RedirectResource
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RedirectResource
     */
    'page_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RedirectResource
     */
    'source_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof RedirectResource
     */
    'page_route'?: string;
    /**
     * 
     * @type {string}
     * @memberof RedirectResource
     */
    'redirect_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof RedirectResource
     */
    'redirect_url'?: string;
    /**
     * 
     * @type {number}
     * @memberof RedirectResource
     */
    'redirect_code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RedirectResource
     */
    'regex'?: string;
}
/**
 * Region model
 * @export
 * @interface Region
 */
export interface Region {
    /**
     * 
     * @type {number}
     * @memberof Region
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof Region
     */
    'site_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Region
     */
    'order'?: number;
}
/**
 * Region Full Resource model
 * @export
 * @interface RegionFullResource
 */
export interface RegionFullResource {
    /**
     * 
     * @type {number}
     * @memberof RegionFullResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RegionFullResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegionFullResource
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof RegionFullResource
     */
    'site_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RegionFullResource
     */
    'order'?: number;
    /**
     * 
     * @type {Array<RegionFullResourceAdventuresInner>}
     * @memberof RegionFullResource
     */
    'adventures'?: Array<RegionFullResourceAdventuresInner>;
}
/**
 * 
 * @export
 * @interface RegionFullResourceAdventuresInner
 */
export interface RegionFullResourceAdventuresInner {
    /**
     * 
     * @type {string}
     * @memberof RegionFullResourceAdventuresInner
     */
    'country_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegionFullResourceAdventuresInner
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RegionFullResourceAdventuresInner
     */
    'highlights'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RegionFullResourceAdventuresInner
     */
    'testimonial'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegionFullResourceAdventuresInner
     */
    'client_name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RegionFullResourceAdventuresInner
     */
    'slides'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RegionFullResourceAdventuresInner
     */
    'map_url'?: string;
}
/**
 * Region Resource model
 * @export
 * @interface RegionResource
 */
export interface RegionResource {
    /**
     * 
     * @type {number}
     * @memberof RegionResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RegionResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegionResource
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof RegionResource
     */
    'site_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RegionResource
     */
    'order'?: number;
}
/**
 * Rule model
 * @export
 * @interface Rule
 */
export interface Rule {
    /**
     * 
     * @type {number}
     * @memberof Rule
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Rule
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rule
     */
    'text'?: string;
    /**
     * 
     * @type {number}
     * @memberof Rule
     */
    'site_id'?: number;
}
/**
 * Rule Resource model
 * @export
 * @interface RuleResource
 */
export interface RuleResource {
    /**
     * 
     * @type {number}
     * @memberof RuleResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RuleResource
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof RuleResource
     */
    'text'?: string;
    /**
     * 
     * @type {AdventureResourceRegion}
     * @memberof RuleResource
     */
    'site'?: AdventureResourceRegion;
}
/**
 * 
 * @export
 * @interface SearchPost200Response
 */
export interface SearchPost200Response {
    /**
     * 
     * @type {Array<SearchPost200ResponseDataInner>}
     * @memberof SearchPost200Response
     */
    'data'?: Array<SearchPost200ResponseDataInner>;
}
/**
 * 
 * @export
 * @interface SearchPost200ResponseDataInner
 */
export interface SearchPost200ResponseDataInner {
    /**
     * 
     * @type {number}
     * @memberof SearchPost200ResponseDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SearchPost200ResponseDataInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchPost200ResponseDataInner
     */
    'route'?: string;
}
/**
 * Section model
 * @export
 * @interface Section
 */
export interface Section {
    /**
     * 
     * @type {number}
     * @memberof Section
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface SectionList200Response
 */
export interface SectionList200Response {
    /**
     * 
     * @type {Array<SectionResource>}
     * @memberof SectionList200Response
     */
    'data'?: Array<SectionResource>;
}
/**
 * Section Resource model
 * @export
 * @interface SectionResource
 */
export interface SectionResource {
    /**
     * 
     * @type {number}
     * @memberof SectionResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SectionResource
     */
    'name'?: string;
}
/**
 * Setting model
 * @export
 * @interface Setting
 */
export interface Setting {
    /**
     * 
     * @type {number}
     * @memberof Setting
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof Setting
     */
    'value'?: string;
    /**
     * 
     * @type {number}
     * @memberof Setting
     */
    'brand_id'?: number;
}
/**
 * Setting Resource model
 * @export
 * @interface SettingResource
 */
export interface SettingResource {
    /**
     * 
     * @type {number}
     * @memberof SettingResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SettingResource
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof SettingResource
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof SettingResource
     */
    'value'?: string;
    /**
     * 
     * @type {number}
     * @memberof SettingResource
     */
    'brand_id'?: number;
}
/**
 * 
 * @export
 * @interface ShowHistory200Response
 */
export interface ShowHistory200Response {
    /**
     * 
     * @type {HistoryResource}
     * @memberof ShowHistory200Response
     */
    'data'?: HistoryResource;
}
/**
 * 
 * @export
 * @interface ShowNotification200Response
 */
export interface ShowNotification200Response {
    /**
     * 
     * @type {NotificationResource}
     * @memberof ShowNotification200Response
     */
    'data'?: NotificationResource;
}
/**
 * Site model
 * @export
 * @interface Site
 */
export interface Site {
    /**
     * 
     * @type {number}
     * @memberof Site
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Site
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Site
     */
    'flag_url'?: string;
    /**
     * 
     * @type {number}
     * @memberof Site
     */
    'enable'?: number;
}
/**
 * Site Resource model
 * @export
 * @interface SiteResource
 */
export interface SiteResource {
    /**
     * 
     * @type {number}
     * @memberof SiteResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SiteResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SiteResource
     */
    'flag_url'?: string;
    /**
     * 
     * @type {number}
     * @memberof SiteResource
     */
    'enable'?: number;
}
/**
 * Slide model
 * @export
 * @interface Slide
 */
export interface Slide {
    /**
     * 
     * @type {number}
     * @memberof Slide
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Slide
     */
    'url'?: string;
    /**
     * 
     * @type {number}
     * @memberof Slide
     */
    'media_type_id'?: number;
}
/**
 * Status model
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * 
     * @type {number}
     * @memberof Status
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    'name'?: string;
}
/**
 * Status Resource model
 * @export
 * @interface StatusResource
 */
export interface StatusResource {
    /**
     * 
     * @type {number}
     * @memberof StatusResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StatusResource
     */
    'name'?: string;
}
/**
 * Template model
 * @export
 * @interface Template
 */
export interface Template {
    /**
     * 
     * @type {number}
     * @memberof Template
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Template
     */
    'name'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof Template
     */
    'widgets'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof Template
     */
    'brand_id'?: number;
}
/**
 * 
 * @export
 * @interface TemplateList200Response
 */
export interface TemplateList200Response {
    /**
     * 
     * @type {Array<TemplateResource>}
     * @memberof TemplateList200Response
     */
    'data'?: Array<TemplateResource>;
}
/**
 * Template Resource model
 * @export
 * @interface TemplateResource
 */
export interface TemplateResource {
    /**
     * 
     * @type {number}
     * @memberof TemplateResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TemplateResource
     */
    'name'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof TemplateResource
     */
    'widgets'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof TemplateResource
     */
    'brand_id'?: number;
}
/**
 * User model
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'level'?: string;
}
/**
 * Widgets model
 * @export
 * @interface Widgets
 */
export interface Widgets {
    /**
     * 
     * @type {number}
     * @memberof Widgets
     */
    'page_id'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof Widgets
     */
    'widgets'?: Array<object>;
}

/**
 * AdventureApi - axios parameter creator
 * @export
 */
export const AdventureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Adventure} adventure 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdventure: async (adventure: Adventure, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adventure' is not null or undefined
            assertParamExists('addAdventure', 'adventure', adventure)
            const localVarPath = `/adventure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adventure, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adventureList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/adventure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdventure: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAdventure', 'id', id)
            const localVarPath = `/adventure/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventure: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAdventure', 'id', id)
            const localVarPath = `/adventure/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} regionId Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventureByRegionId: async (regionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'regionId' is not null or undefined
            assertParamExists('getAdventureByRegionId', 'regionId', regionId)
            const localVarPath = `/adventure/getByRegionId/{regionId}`
                .replace(`{${"regionId"}}`, encodeURIComponent(String(regionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {Adventure} adventure 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdventure: async (id: number, adventure: Adventure, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAdventure', 'id', id)
            // verify required parameter 'adventure' is not null or undefined
            assertParamExists('updateAdventure', 'adventure', adventure)
            const localVarPath = `/adventure/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adventure, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdventureApi - functional programming interface
 * @export
 */
export const AdventureApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdventureApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Adventure} adventure 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAdventure(adventure: Adventure, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Adventure>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAdventure(adventure, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adventureList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdventureList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adventureList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdventure(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdventure(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdventure(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAdventure200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdventure(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} regionId Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdventureByRegionId(regionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdventureList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdventureByRegionId(regionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {Adventure} adventure 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdventure(id: number, adventure: Adventure, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Adventure>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdventure(id, adventure, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdventureApi - factory interface
 * @export
 */
export const AdventureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdventureApiFp(configuration)
    return {
        /**
         * 
         * @param {Adventure} adventure 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdventure(adventure: Adventure, options?: any): AxiosPromise<Adventure> {
            return localVarFp.addAdventure(adventure, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adventureList(options?: any): AxiosPromise<AdventureList200Response> {
            return localVarFp.adventureList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdventure(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteAdventure(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventure(id: number, options?: any): AxiosPromise<GetAdventure200Response> {
            return localVarFp.getAdventure(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} regionId Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventureByRegionId(regionId: number, options?: any): AxiosPromise<AdventureList200Response> {
            return localVarFp.getAdventureByRegionId(regionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Adventure ID
         * @param {Adventure} adventure 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdventure(id: number, adventure: Adventure, options?: any): AxiosPromise<Adventure> {
            return localVarFp.updateAdventure(id, adventure, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdventureApi - object-oriented interface
 * @export
 * @class AdventureApi
 * @extends {BaseAPI}
 */
export class AdventureApi extends BaseAPI {
    /**
     * 
     * @param {Adventure} adventure 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdventureApi
     */
    public addAdventure(adventure: Adventure, options?: AxiosRequestConfig) {
        return AdventureApiFp(this.configuration).addAdventure(adventure, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdventureApi
     */
    public adventureList(options?: AxiosRequestConfig) {
        return AdventureApiFp(this.configuration).adventureList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Adventure ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdventureApi
     */
    public deleteAdventure(id: number, options?: AxiosRequestConfig) {
        return AdventureApiFp(this.configuration).deleteAdventure(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Adventure ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdventureApi
     */
    public getAdventure(id: number, options?: AxiosRequestConfig) {
        return AdventureApiFp(this.configuration).getAdventure(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} regionId Region ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdventureApi
     */
    public getAdventureByRegionId(regionId: number, options?: AxiosRequestConfig) {
        return AdventureApiFp(this.configuration).getAdventureByRegionId(regionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Adventure ID
     * @param {Adventure} adventure 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdventureApi
     */
    public updateAdventure(id: number, adventure: Adventure, options?: AxiosRequestConfig) {
        return AdventureApiFp(this.configuration).updateAdventure(id, adventure, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AssetApi - axios parameter creator
 * @export
 */
export const AssetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Asset} asset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAsset: async (brandId: number, asset: Asset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('addAsset', 'brandId', brandId)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('addAsset', 'asset', asset)
            const localVarPath = `/asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(asset, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetList: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('assetList', 'brandId', brandId)
            const localVarPath = `/asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Asset ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAsset: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('deleteAsset', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAsset', 'id', id)
            const localVarPath = `/asset/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {string} string string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doSearchAsset: async (brandId: number, string: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('doSearchAsset', 'brandId', brandId)
            // verify required parameter 'string' is not null or undefined
            assertParamExists('doSearchAsset', 'string', string)
            const localVarPath = `/asset/searchAsset/{string}`
                .replace(`{${"string"}}`, encodeURIComponent(String(string)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Asset ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsset: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getAsset', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAsset', 'id', id)
            const localVarPath = `/asset/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Asset ID
         * @param {Asset} asset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAsset: async (brandId: number, id: number, asset: Asset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('updateAsset', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAsset', 'id', id)
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('updateAsset', 'asset', asset)
            const localVarPath = `/asset/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(asset, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetApi - functional programming interface
 * @export
 */
export const AssetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Asset} asset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAsset(brandId: number, asset: Asset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Asset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAsset(brandId, asset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetList(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetList(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Asset ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAsset(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAsset(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {string} string string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doSearchAsset(brandId: number, string: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doSearchAsset(brandId, string, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Asset ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAsset(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAsset200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAsset(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Asset ID
         * @param {Asset} asset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAsset(brandId: number, id: number, asset: Asset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Asset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAsset(brandId, id, asset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssetApi - factory interface
 * @export
 */
export const AssetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetApiFp(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Asset} asset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAsset(brandId: number, asset: Asset, options?: any): AxiosPromise<Asset> {
            return localVarFp.addAsset(brandId, asset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetList(brandId: number, options?: any): AxiosPromise<AssetList200Response> {
            return localVarFp.assetList(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Asset ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAsset(brandId: number, id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteAsset(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {string} string string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doSearchAsset(brandId: number, string: string, options?: any): AxiosPromise<void> {
            return localVarFp.doSearchAsset(brandId, string, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Asset ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsset(brandId: number, id: number, options?: any): AxiosPromise<GetAsset200Response> {
            return localVarFp.getAsset(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Asset ID
         * @param {Asset} asset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAsset(brandId: number, id: number, asset: Asset, options?: any): AxiosPromise<Asset> {
            return localVarFp.updateAsset(brandId, id, asset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetApi - object-oriented interface
 * @export
 * @class AssetApi
 * @extends {BaseAPI}
 */
export class AssetApi extends BaseAPI {
    /**
     * 
     * @param {number} brandId Brand ID
     * @param {Asset} asset 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public addAsset(brandId: number, asset: Asset, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).addAsset(brandId, asset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public assetList(brandId: number, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).assetList(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Asset ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public deleteAsset(brandId: number, id: number, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).deleteAsset(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {string} string string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public doSearchAsset(brandId: number, string: string, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).doSearchAsset(brandId, string, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Asset ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public getAsset(brandId: number, id: number, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).getAsset(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Asset ID
     * @param {Asset} asset 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public updateAsset(brandId: number, id: number, asset: Asset, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).updateAsset(brandId, id, asset, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/getUserInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} publicKey public Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInquiry: async (publicKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicKey' is not null or undefined
            assertParamExists('userInquiry', 'publicKey', publicKey)
            const localVarPath = `/auth/inquiry/{publicKey}`
                .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} publicKey public Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userInquiry(publicKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InquiryResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userInquiry(publicKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(options?: any): AxiosPromise<any> {
            return localVarFp.getUserInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} publicKey public Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInquiry(publicKey: string, options?: any): AxiosPromise<InquiryResource> {
            return localVarFp.userInquiry(publicKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getUserInfo(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).getUserInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} publicKey public Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public userInquiry(publicKey: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).userInquiry(publicKey, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BlockApi - axios parameter creator
 * @export
 */
export const BlockApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Block} block 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBlock: async (block: Block, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'block' is not null or undefined
            assertParamExists('addBlock', 'block', block)
            const localVarPath = `/block`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(block, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/block`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Block ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlock: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBlock', 'id', id)
            const localVarPath = `/block/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Block ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlock: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBlock', 'id', id)
            const localVarPath = `/block/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Block ID
         * @param {Block} block 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBlock: async (id: number, block: Block, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBlock', 'id', id)
            // verify required parameter 'block' is not null or undefined
            assertParamExists('updateBlock', 'block', block)
            const localVarPath = `/block/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(block, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BlockPage} blockPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProps: async (blockPage: BlockPage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blockPage' is not null or undefined
            assertParamExists('updateProps', 'blockPage', blockPage)
            const localVarPath = `/block/updateProps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blockPage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlockApi - functional programming interface
 * @export
 */
export const BlockApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlockApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Block} block 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBlock(block: Block, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Block>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBlock(block, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blockList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blockList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Block ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBlock(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBlock(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Block ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlock(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBlock200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlock(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Block ID
         * @param {Block} block 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBlock(id: number, block: Block, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Block>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBlock(id, block, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BlockPage} blockPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProps(blockPage: BlockPage, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProps(blockPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BlockApi - factory interface
 * @export
 */
export const BlockApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlockApiFp(configuration)
    return {
        /**
         * 
         * @param {Block} block 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBlock(block: Block, options?: any): AxiosPromise<Block> {
            return localVarFp.addBlock(block, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockList(options?: any): AxiosPromise<BlockList200Response> {
            return localVarFp.blockList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Block ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlock(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteBlock(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Block ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlock(id: number, options?: any): AxiosPromise<GetBlock200Response> {
            return localVarFp.getBlock(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Block ID
         * @param {Block} block 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBlock(id: number, block: Block, options?: any): AxiosPromise<Block> {
            return localVarFp.updateBlock(id, block, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlockPage} blockPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProps(blockPage: BlockPage, options?: any): AxiosPromise<any> {
            return localVarFp.updateProps(blockPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BlockApi - object-oriented interface
 * @export
 * @class BlockApi
 * @extends {BaseAPI}
 */
export class BlockApi extends BaseAPI {
    /**
     * 
     * @param {Block} block 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    public addBlock(block: Block, options?: AxiosRequestConfig) {
        return BlockApiFp(this.configuration).addBlock(block, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    public blockList(options?: AxiosRequestConfig) {
        return BlockApiFp(this.configuration).blockList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Block ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    public deleteBlock(id: number, options?: AxiosRequestConfig) {
        return BlockApiFp(this.configuration).deleteBlock(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Block ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    public getBlock(id: number, options?: AxiosRequestConfig) {
        return BlockApiFp(this.configuration).getBlock(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Block ID
     * @param {Block} block 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    public updateBlock(id: number, block: Block, options?: AxiosRequestConfig) {
        return BlockApiFp(this.configuration).updateBlock(id, block, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlockPage} blockPage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    public updateProps(blockPage: BlockPage, options?: AxiosRequestConfig) {
        return BlockApiFp(this.configuration).updateProps(blockPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _062b0e17b0b265231ad33ece1785b1fe: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('_062b0e17b0b265231ad33ece1785b1fe', 'brandId', brandId)
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _0fd985657bea3b2f3a919bdc16fec5b9: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('_0fd985657bea3b2f3a919bdc16fec5b9', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_0fd985657bea3b2f3a919bdc16fec5b9', 'id', id)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Category ID
         * @param {Category} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _2aeef67a0c5f4a9161985387cab71ccc: async (brandId: number, id: number, category: Category, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('_2aeef67a0c5f4a9161985387cab71ccc', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_2aeef67a0c5f4a9161985387cab71ccc', 'id', id)
            // verify required parameter 'category' is not null or undefined
            assertParamExists('_2aeef67a0c5f4a9161985387cab71ccc', 'category', category)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(category, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Category} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _8a437c9b58cb5726b37615e8a5a9857c: async (brandId: number, category: Category, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('_8a437c9b58cb5726b37615e8a5a9857c', 'brandId', brandId)
            // verify required parameter 'category' is not null or undefined
            assertParamExists('_8a437c9b58cb5726b37615e8a5a9857c', 'category', category)
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(category, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        c22ffb01fe96cd5baf6a4174466b2672: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('c22ffb01fe96cd5baf6a4174466b2672', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('c22ffb01fe96cd5baf6a4174466b2672', 'id', id)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _062b0e17b0b265231ad33ece1785b1fe(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model062b0e17b0b265231ad33ece1785b1fe200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._062b0e17b0b265231ad33ece1785b1fe(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _0fd985657bea3b2f3a919bdc16fec5b9(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model0fd985657bea3b2f3a919bdc16fec5b9200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._0fd985657bea3b2f3a919bdc16fec5b9(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Category ID
         * @param {Category} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _2aeef67a0c5f4a9161985387cab71ccc(brandId: number, id: number, category: Category, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._2aeef67a0c5f4a9161985387cab71ccc(brandId, id, category, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Category} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _8a437c9b58cb5726b37615e8a5a9857c(brandId: number, category: Category, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._8a437c9b58cb5726b37615e8a5a9857c(brandId, category, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async c22ffb01fe96cd5baf6a4174466b2672(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.c22ffb01fe96cd5baf6a4174466b2672(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _062b0e17b0b265231ad33ece1785b1fe(brandId: number, options?: any): AxiosPromise<Model062b0e17b0b265231ad33ece1785b1fe200Response> {
            return localVarFp._062b0e17b0b265231ad33ece1785b1fe(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _0fd985657bea3b2f3a919bdc16fec5b9(brandId: number, id: number, options?: any): AxiosPromise<Model0fd985657bea3b2f3a919bdc16fec5b9200Response> {
            return localVarFp._0fd985657bea3b2f3a919bdc16fec5b9(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Category ID
         * @param {Category} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _2aeef67a0c5f4a9161985387cab71ccc(brandId: number, id: number, category: Category, options?: any): AxiosPromise<Category> {
            return localVarFp._2aeef67a0c5f4a9161985387cab71ccc(brandId, id, category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Category} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _8a437c9b58cb5726b37615e8a5a9857c(brandId: number, category: Category, options?: any): AxiosPromise<Category> {
            return localVarFp._8a437c9b58cb5726b37615e8a5a9857c(brandId, category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        c22ffb01fe96cd5baf6a4174466b2672(brandId: number, id: number, options?: any): AxiosPromise<any> {
            return localVarFp.c22ffb01fe96cd5baf6a4174466b2672(brandId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public _062b0e17b0b265231ad33ece1785b1fe(brandId: number, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration)._062b0e17b0b265231ad33ece1785b1fe(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public _0fd985657bea3b2f3a919bdc16fec5b9(brandId: number, id: number, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration)._0fd985657bea3b2f3a919bdc16fec5b9(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Category ID
     * @param {Category} category 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public _2aeef67a0c5f4a9161985387cab71ccc(brandId: number, id: number, category: Category, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration)._2aeef67a0c5f4a9161985387cab71ccc(brandId, id, category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {Category} category 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public _8a437c9b58cb5726b37615e8a5a9857c(brandId: number, category: Category, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration)._8a437c9b58cb5726b37615e8a5a9857c(brandId, category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public c22ffb01fe96cd5baf6a4174466b2672(brandId: number, id: number, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).c22ffb01fe96cd5baf6a4174466b2672(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConstantApi - axios parameter creator
 * @export
 */
export const ConstantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Constant} constant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConstant: async (constant: Constant, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'constant' is not null or undefined
            assertParamExists('addConstant', 'constant', constant)
            const localVarPath = `/constant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(constant, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constantList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/constant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Constant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConstant: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteConstant', 'id', id)
            const localVarPath = `/constant/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Constant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConstant: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getConstant', 'id', id)
            const localVarPath = `/constant/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} siteName Site Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConstants: async (siteName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteName' is not null or undefined
            assertParamExists('getConstants', 'siteName', siteName)
            const localVarPath = `/constant/getConstants/{siteName}`
                .replace(`{${"siteName"}}`, encodeURIComponent(String(siteName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Constant ID
         * @param {Constant} constant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConstant: async (id: number, constant: Constant, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateConstant', 'id', id)
            // verify required parameter 'constant' is not null or undefined
            assertParamExists('updateConstant', 'constant', constant)
            const localVarPath = `/constant/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(constant, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConstantApi - functional programming interface
 * @export
 */
export const ConstantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConstantApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Constant} constant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addConstant(constant: Constant, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Constant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addConstant(constant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async constantList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConstantList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.constantList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Constant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConstant(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConstant(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Constant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConstant(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetConstant200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConstant(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} siteName Site Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConstants(siteName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConstantList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConstants(siteName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Constant ID
         * @param {Constant} constant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateConstant(id: number, constant: Constant, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Constant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConstant(id, constant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConstantApi - factory interface
 * @export
 */
export const ConstantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConstantApiFp(configuration)
    return {
        /**
         * 
         * @param {Constant} constant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConstant(constant: Constant, options?: any): AxiosPromise<Constant> {
            return localVarFp.addConstant(constant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constantList(options?: any): AxiosPromise<ConstantList200Response> {
            return localVarFp.constantList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Constant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConstant(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteConstant(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Constant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConstant(id: number, options?: any): AxiosPromise<GetConstant200Response> {
            return localVarFp.getConstant(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} siteName Site Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConstants(siteName: string, options?: any): AxiosPromise<ConstantList200Response> {
            return localVarFp.getConstants(siteName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Constant ID
         * @param {Constant} constant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConstant(id: number, constant: Constant, options?: any): AxiosPromise<Constant> {
            return localVarFp.updateConstant(id, constant, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConstantApi - object-oriented interface
 * @export
 * @class ConstantApi
 * @extends {BaseAPI}
 */
export class ConstantApi extends BaseAPI {
    /**
     * 
     * @param {Constant} constant 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstantApi
     */
    public addConstant(constant: Constant, options?: AxiosRequestConfig) {
        return ConstantApiFp(this.configuration).addConstant(constant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstantApi
     */
    public constantList(options?: AxiosRequestConfig) {
        return ConstantApiFp(this.configuration).constantList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Constant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstantApi
     */
    public deleteConstant(id: number, options?: AxiosRequestConfig) {
        return ConstantApiFp(this.configuration).deleteConstant(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Constant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstantApi
     */
    public getConstant(id: number, options?: AxiosRequestConfig) {
        return ConstantApiFp(this.configuration).getConstant(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} siteName Site Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstantApi
     */
    public getConstants(siteName: string, options?: AxiosRequestConfig) {
        return ConstantApiFp(this.configuration).getConstants(siteName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Constant ID
     * @param {Constant} constant 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstantApi
     */
    public updateConstant(id: number, constant: Constant, options?: AxiosRequestConfig) {
        return ConstantApiFp(this.configuration).updateConstant(id, constant, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ErrorApi - axios parameter creator
 * @export
 */
export const ErrorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorList: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('errorList', 'brandId', brandId)
            const localVarPath = `/error`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Error ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getError: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getError', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getError', 'id', id)
            const localVarPath = `/error/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Error ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsDone: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('setAsDone', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('setAsDone', 'id', id)
            const localVarPath = `/error/setAsDone/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ErrorApi - functional programming interface
 * @export
 */
export const ErrorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ErrorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async errorList(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.errorList(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Error ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getError(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetError200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getError(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Error ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAsDone(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setAsDone(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ErrorApi - factory interface
 * @export
 */
export const ErrorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ErrorApiFp(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorList(brandId: number, options?: any): AxiosPromise<ErrorList200Response> {
            return localVarFp.errorList(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Error ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getError(brandId: number, id: number, options?: any): AxiosPromise<GetError200Response> {
            return localVarFp.getError(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Error ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsDone(brandId: number, id: number, options?: any): AxiosPromise<Error> {
            return localVarFp.setAsDone(brandId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ErrorApi - object-oriented interface
 * @export
 * @class ErrorApi
 * @extends {BaseAPI}
 */
export class ErrorApi extends BaseAPI {
    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorApi
     */
    public errorList(brandId: number, options?: AxiosRequestConfig) {
        return ErrorApiFp(this.configuration).errorList(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Error ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorApi
     */
    public getError(brandId: number, id: number, options?: AxiosRequestConfig) {
        return ErrorApiFp(this.configuration).getError(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Error ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorApi
     */
    public setAsDone(brandId: number, id: number, options?: AxiosRequestConfig) {
        return ErrorApiFp(this.configuration).setAsDone(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ExodusAPIsApi - axios parameter creator
 * @export
 */
export const ExodusAPIsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} adventureId Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventureInfo: async (adventureId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adventureId' is not null or undefined
            assertParamExists('getAdventureInfo', 'adventureId', adventureId)
            const localVarPath = `/exodus/getAdventureInfo/{adventureId}`
                .replace(`{${"adventureId"}}`, encodeURIComponent(String(adventureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} regionId Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventureList: async (regionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'regionId' is not null or undefined
            assertParamExists('getAdventureList', 'regionId', regionId)
            const localVarPath = `/exodus/getAdventureList/{regionId}`
                .replace(`{${"regionId"}}`, encodeURIComponent(String(regionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} siteName Site Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConstantsBySiteName: async (siteName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteName' is not null or undefined
            assertParamExists('getConstantsBySiteName', 'siteName', siteName)
            const localVarPath = `/exodus/getBySiteName/{siteName}`
                .replace(`{${"siteName"}}`, encodeURIComponent(String(siteName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegionList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exodus/getRegionList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exodus/getRegions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegionsBysiteId: async (siteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteId' is not null or undefined
            assertParamExists('getRegionsBysiteId', 'siteId', siteId)
            const localVarPath = `/exodus/getRegionsBySiteId/{siteId}`
                .replace(`{${"siteId"}}`, encodeURIComponent(String(siteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRulesBySiteId: async (siteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteId' is not null or undefined
            assertParamExists('getRulesBySiteId', 'siteId', siteId)
            const localVarPath = `/exodus/getRulesBySiteId/{siteId}`
                .replace(`{${"siteId"}}`, encodeURIComponent(String(siteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exodus/getSites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExodusAPIsApi - functional programming interface
 * @export
 */
export const ExodusAPIsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExodusAPIsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} adventureId Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdventureInfo(adventureId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAdventure200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdventureInfo(adventureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} regionId Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdventureList(regionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdventureList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdventureList(regionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} siteName Site Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConstantsBySiteName(siteName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConstantList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConstantsBySiteName(siteName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegionList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRegionList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegionList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRegions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegionsBysiteId(siteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRegions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegionsBysiteId(siteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRulesBySiteId(siteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRulesBySiteId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRulesBySiteId(siteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSiteList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSiteList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSiteList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExodusAPIsApi - factory interface
 * @export
 */
export const ExodusAPIsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExodusAPIsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} adventureId Adventure ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventureInfo(adventureId: number, options?: any): AxiosPromise<GetAdventure200Response> {
            return localVarFp.getAdventureInfo(adventureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} regionId Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdventureList(regionId: number, options?: any): AxiosPromise<AdventureList200Response> {
            return localVarFp.getAdventureList(regionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} siteName Site Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConstantsBySiteName(siteName: string, options?: any): AxiosPromise<ConstantList200Response> {
            return localVarFp.getConstantsBySiteName(siteName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegionList(options?: any): AxiosPromise<GetRegionList200Response> {
            return localVarFp.getRegionList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegions(options?: any): AxiosPromise<GetRegions200Response> {
            return localVarFp.getRegions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegionsBysiteId(siteId: number, options?: any): AxiosPromise<GetRegions200Response> {
            return localVarFp.getRegionsBysiteId(siteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRulesBySiteId(siteId: number, options?: any): AxiosPromise<GetRulesBySiteId200Response> {
            return localVarFp.getRulesBySiteId(siteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteList(options?: any): AxiosPromise<GetSiteList200Response> {
            return localVarFp.getSiteList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExodusAPIsApi - object-oriented interface
 * @export
 * @class ExodusAPIsApi
 * @extends {BaseAPI}
 */
export class ExodusAPIsApi extends BaseAPI {
    /**
     * 
     * @param {number} adventureId Adventure ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExodusAPIsApi
     */
    public getAdventureInfo(adventureId: number, options?: AxiosRequestConfig) {
        return ExodusAPIsApiFp(this.configuration).getAdventureInfo(adventureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} regionId Region ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExodusAPIsApi
     */
    public getAdventureList(regionId: number, options?: AxiosRequestConfig) {
        return ExodusAPIsApiFp(this.configuration).getAdventureList(regionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} siteName Site Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExodusAPIsApi
     */
    public getConstantsBySiteName(siteName: string, options?: AxiosRequestConfig) {
        return ExodusAPIsApiFp(this.configuration).getConstantsBySiteName(siteName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExodusAPIsApi
     */
    public getRegionList(options?: AxiosRequestConfig) {
        return ExodusAPIsApiFp(this.configuration).getRegionList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExodusAPIsApi
     */
    public getRegions(options?: AxiosRequestConfig) {
        return ExodusAPIsApiFp(this.configuration).getRegions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} siteId Site ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExodusAPIsApi
     */
    public getRegionsBysiteId(siteId: number, options?: AxiosRequestConfig) {
        return ExodusAPIsApiFp(this.configuration).getRegionsBysiteId(siteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} siteId Site ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExodusAPIsApi
     */
    public getRulesBySiteId(siteId: number, options?: AxiosRequestConfig) {
        return ExodusAPIsApiFp(this.configuration).getRulesBySiteId(siteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExodusAPIsApi
     */
    public getSiteList(options?: AxiosRequestConfig) {
        return ExodusAPIsApiFp(this.configuration).getSiteList(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HUSAAPIsApi - axios parameter creator
 * @export
 */
export const HUSAAPIsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ModelError} modelError 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addError: async (modelError: ModelError, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelError' is not null or undefined
            assertParamExists('addError', 'modelError', modelError)
            const localVarPath = `/husa/addError`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelError, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d0f15b1af046a8e16188381fef27782f: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/husa/getCategories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} string string
         * @param {number} [brandId] Brand Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doSearchPage: async (string: string, brandId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'string' is not null or undefined
            assertParamExists('doSearchPage', 'string', string)
            const localVarPath = `/husa/searchPage/{string}`
                .replace(`{${"string"}}`, encodeURIComponent(String(string)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (brandId !== undefined) {
                localVarQueryParameter['brand_id'] = brandId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPages: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/husa/getPages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPosts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/husa/getPosts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} blockId Block ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockInfo: async (blockId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blockId' is not null or undefined
            assertParamExists('getBlockInfo', 'blockId', blockId)
            const localVarPath = `/husa/getBlockInfo/{blockId}`
                .replace(`{${"blockId"}}`, encodeURIComponent(String(blockId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} categoryId Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlocksByCategoryId: async (categoryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getBlocksByCategoryId', 'categoryId', categoryId)
            const localVarPath = `/husa/getBlocksByCategoryId/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlocksByPageId: async (pageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('getBlocksByPageId', 'pageId', pageId)
            const localVarPath = `/husa/getBlocksByPageId/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} modelId Model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDynamicPages: async (modelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getDynamicPages', 'modelId', modelId)
            const localVarPath = `/husa/getDynamicPages/{modelId}`
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/husa/getMenus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotifications: async (pageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('getNotifications', 'pageId', pageId)
            const localVarPath = `/husa/getNotifications/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} url Page URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageByUrl: async (url: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('getPageByUrl', 'url', url)
            const localVarPath = `/husa/getPageByUrl/{url}`
                .replace(`{${"url"}}`, encodeURIComponent(String(url)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} value Page ID or Page Url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageDetail: async (value: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'value' is not null or undefined
            assertParamExists('getPageDetail', 'value', value)
            const localVarPath = `/husa/getPageDetail/{value}`
                .replace(`{${"value"}}`, encodeURIComponent(String(value)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageInfo: async (pageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('getPageInfo', 'pageId', pageId)
            const localVarPath = `/husa/getPageInfo/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [perPage] Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaginatePosts: async (perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/husa/getPaginatePosts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} postId Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostById: async (postId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('getPostById', 'postId', postId)
            const localVarPath = `/husa/getPostInfo/{postId}`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductInfo: async (productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getProductInfo', 'productId', productId)
            const localVarPath = `/husa/getProductInfo/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/husa/getProducts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirectList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/husa/getRedirects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/husa/getSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaticPages: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/husa/getStaticPages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} tempId Template ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateInfo: async (tempId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tempId' is not null or undefined
            assertParamExists('getTemplateInfo', 'tempId', tempId)
            const localVarPath = `/husa/getTemplateInfo/{tempId}`
                .replace(`{${"tempId"}}`, encodeURIComponent(String(tempId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/husa/getTemplates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [string] string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPost: async (string?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/husa/searchPost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (string !== undefined) {
                localVarQueryParameter['string'] = string;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [categoryId] Category ID
         * @param {string} [string] string
         * @param {string} [condition] condition: or/and, default: or
         * @param {Array<string>} [filters] filters array
         * @param {string} [sort] sort by newest / oldest
         * @param {string} [type] page type: product or support
         * @param {number} [brandId] Brand Id
         * @param {Array<number>} [status] array of status_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProductByCategoryId: async (categoryId?: number, string?: string, condition?: string, filters?: Array<string>, sort?: string, type?: string, brandId?: number, status?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/husa/searchProduct`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryId !== undefined) {
                localVarQueryParameter['category_id'] = categoryId;
            }

            if (string !== undefined) {
                localVarQueryParameter['string'] = string;
            }

            if (condition !== undefined) {
                localVarQueryParameter['condition'] = condition;
            }

            if (filters) {
                localVarQueryParameter['filters[]'] = filters;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (brandId !== undefined) {
                localVarQueryParameter['brand_id'] = brandId;
            }

            if (status) {
                localVarQueryParameter['status[]'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HUSAAPIsApi - functional programming interface
 * @export
 */
export const HUSAAPIsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HUSAAPIsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ModelError} modelError 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addError(modelError: ModelError, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addError(modelError, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async d0f15b1af046a8e16188381fef27782f(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model062b0e17b0b265231ad33ece1785b1fe200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.d0f15b1af046a8e16188381fef27782f(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} string string
         * @param {number} [brandId] Brand Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doSearchPage(string: string, brandId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doSearchPage(string, brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPages(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllPages200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPages(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPosts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllPosts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPosts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} blockId Block ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockInfo(blockId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBlock200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlockInfo(blockId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} categoryId Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlocksByCategoryId(categoryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlocksByCategoryId(categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlocksByPageId(pageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBlocksByPageId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlocksByPageId(pageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} modelId Model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDynamicPages(modelId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllPages200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDynamicPages(modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMenuList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMenuList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotifications(pageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNotifications200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotifications(pageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} url Page URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPageByUrl(url: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPageInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPageByUrl(url, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} value Page ID or Page Url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPageDetail(value: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPageInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPageDetail(value, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPageInfo(pageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPageInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPageInfo(pageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [perPage] Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaginatePosts(perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPaginatePosts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaginatePosts(perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} postId Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostById(postId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostById200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostById(postId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductInfo(productId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProductInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductInfo(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProductList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRedirectList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRedirectList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRedirectList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettingList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSettingList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettingList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStaticPages(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllPages200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStaticPages(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} tempId Template ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTemplateInfo(tempId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTemplateInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTemplateInfo(tempId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTemplateList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTemplateList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTemplateList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [string] string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchPost(string?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchPost(string, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [categoryId] Category ID
         * @param {string} [string] string
         * @param {string} [condition] condition: or/and, default: or
         * @param {Array<string>} [filters] filters array
         * @param {string} [sort] sort by newest / oldest
         * @param {string} [type] page type: product or support
         * @param {number} [brandId] Brand Id
         * @param {Array<number>} [status] array of status_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchProductByCategoryId(categoryId?: number, string?: string, condition?: string, filters?: Array<string>, sort?: string, type?: string, brandId?: number, status?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchProductByCategoryId(categoryId, string, condition, filters, sort, type, brandId, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HUSAAPIsApi - factory interface
 * @export
 */
export const HUSAAPIsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HUSAAPIsApiFp(configuration)
    return {
        /**
         * 
         * @param {ModelError} modelError 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addError(modelError: ModelError, options?: any): AxiosPromise<Error> {
            return localVarFp.addError(modelError, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d0f15b1af046a8e16188381fef27782f(options?: any): AxiosPromise<Model062b0e17b0b265231ad33ece1785b1fe200Response> {
            return localVarFp.d0f15b1af046a8e16188381fef27782f(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} string string
         * @param {number} [brandId] Brand Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doSearchPage(string: string, brandId?: number, options?: any): AxiosPromise<void> {
            return localVarFp.doSearchPage(string, brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPages(options?: any): AxiosPromise<GetAllPages200Response> {
            return localVarFp.getAllPages(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPosts(options?: any): AxiosPromise<GetAllPosts200Response> {
            return localVarFp.getAllPosts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} blockId Block ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockInfo(blockId: number, options?: any): AxiosPromise<GetBlock200Response> {
            return localVarFp.getBlockInfo(blockId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} categoryId Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlocksByCategoryId(categoryId: number, options?: any): AxiosPromise<BlockList200Response> {
            return localVarFp.getBlocksByCategoryId(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlocksByPageId(pageId: number, options?: any): AxiosPromise<GetBlocksByPageId200Response> {
            return localVarFp.getBlocksByPageId(pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} modelId Model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDynamicPages(modelId: number, options?: any): AxiosPromise<GetAllPages200Response> {
            return localVarFp.getDynamicPages(modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuList(options?: any): AxiosPromise<GetMenuList200Response> {
            return localVarFp.getMenuList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotifications(pageId: number, options?: any): AxiosPromise<GetNotifications200Response> {
            return localVarFp.getNotifications(pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} url Page URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageByUrl(url: string, options?: any): AxiosPromise<GetPageInfo200Response> {
            return localVarFp.getPageByUrl(url, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} value Page ID or Page Url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageDetail(value: string, options?: any): AxiosPromise<GetPageInfo200Response> {
            return localVarFp.getPageDetail(value, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageInfo(pageId: number, options?: any): AxiosPromise<GetPageInfo200Response> {
            return localVarFp.getPageInfo(pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [perPage] Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaginatePosts(perPage?: number, options?: any): AxiosPromise<GetPaginatePosts200Response> {
            return localVarFp.getPaginatePosts(perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} postId Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostById(postId: number, options?: any): AxiosPromise<GetPostById200Response> {
            return localVarFp.getPostById(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductInfo(productId: number, options?: any): AxiosPromise<GetProductInfo200Response> {
            return localVarFp.getProductInfo(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductList(options?: any): AxiosPromise<GetProductList200Response> {
            return localVarFp.getProductList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirectList(options?: any): AxiosPromise<GetRedirectList200Response> {
            return localVarFp.getRedirectList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingList(options?: any): AxiosPromise<GetSettingList200Response> {
            return localVarFp.getSettingList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaticPages(options?: any): AxiosPromise<GetAllPages200Response> {
            return localVarFp.getStaticPages(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} tempId Template ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateInfo(tempId: number, options?: any): AxiosPromise<GetTemplateInfo200Response> {
            return localVarFp.getTemplateInfo(tempId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateList(options?: any): AxiosPromise<GetTemplateList200Response> {
            return localVarFp.getTemplateList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [string] string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPost(string?: string, options?: any): AxiosPromise<SearchPost200Response> {
            return localVarFp.searchPost(string, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [categoryId] Category ID
         * @param {string} [string] string
         * @param {string} [condition] condition: or/and, default: or
         * @param {Array<string>} [filters] filters array
         * @param {string} [sort] sort by newest / oldest
         * @param {string} [type] page type: product or support
         * @param {number} [brandId] Brand Id
         * @param {Array<number>} [status] array of status_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProductByCategoryId(categoryId?: number, string?: string, condition?: string, filters?: Array<string>, sort?: string, type?: string, brandId?: number, status?: Array<number>, options?: any): AxiosPromise<BlockList200Response> {
            return localVarFp.searchProductByCategoryId(categoryId, string, condition, filters, sort, type, brandId, status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HUSAAPIsApi - object-oriented interface
 * @export
 * @class HUSAAPIsApi
 * @extends {BaseAPI}
 */
export class HUSAAPIsApi extends BaseAPI {
    /**
     * 
     * @param {ModelError} modelError 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public addError(modelError: ModelError, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).addError(modelError, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public d0f15b1af046a8e16188381fef27782f(options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).d0f15b1af046a8e16188381fef27782f(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} string string
     * @param {number} [brandId] Brand Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public doSearchPage(string: string, brandId?: number, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).doSearchPage(string, brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getAllPages(options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getAllPages(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getAllPosts(options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getAllPosts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} blockId Block ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getBlockInfo(blockId: number, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getBlockInfo(blockId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} categoryId Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getBlocksByCategoryId(categoryId: number, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getBlocksByCategoryId(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} pageId Page ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getBlocksByPageId(pageId: number, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getBlocksByPageId(pageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} modelId Model ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getDynamicPages(modelId: number, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getDynamicPages(modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getMenuList(options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getMenuList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} pageId Page ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getNotifications(pageId: number, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getNotifications(pageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} url Page URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getPageByUrl(url: string, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getPageByUrl(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} value Page ID or Page Url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getPageDetail(value: string, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getPageDetail(value, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} pageId Page ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getPageInfo(pageId: number, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getPageInfo(pageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [perPage] Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getPaginatePosts(perPage?: number, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getPaginatePosts(perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} postId Post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getPostById(postId: number, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getPostById(postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} productId Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getProductInfo(productId: number, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getProductInfo(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getProductList(options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getProductList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getRedirectList(options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getRedirectList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getSettingList(options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getSettingList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getStaticPages(options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getStaticPages(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} tempId Template ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getTemplateInfo(tempId: number, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getTemplateInfo(tempId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public getTemplateList(options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).getTemplateList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [string] string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public searchPost(string?: string, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).searchPost(string, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [categoryId] Category ID
     * @param {string} [string] string
     * @param {string} [condition] condition: or/and, default: or
     * @param {Array<string>} [filters] filters array
     * @param {string} [sort] sort by newest / oldest
     * @param {string} [type] page type: product or support
     * @param {number} [brandId] Brand Id
     * @param {Array<number>} [status] array of status_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HUSAAPIsApi
     */
    public searchProductByCategoryId(categoryId?: number, string?: string, condition?: string, filters?: Array<string>, sort?: string, type?: string, brandId?: number, status?: Array<number>, options?: AxiosRequestConfig) {
        return HUSAAPIsApiFp(this.configuration).searchProductByCategoryId(categoryId, string, condition, filters, sort, type, brandId, status, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HistoryApi - axios parameter creator
 * @export
 */
export const HistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHistories: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getAllHistories', 'brandId', brandId)
            const localVarPath = `/history/getHistories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {string} modelName Model Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoriesByModelName: async (brandId: number, modelName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getHistoriesByModelName', 'brandId', brandId)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('getHistoriesByModelName', 'modelName', modelName)
            const localVarPath = `/history/getHistories/{modelName}`
                .replace(`{${"modelName"}}`, encodeURIComponent(String(modelName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {string} modelName Model Name
         * @param {number} modelId Model Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoryByModelNameModelId: async (brandId: number, modelName: string, modelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getHistoryByModelNameModelId', 'brandId', brandId)
            // verify required parameter 'modelName' is not null or undefined
            assertParamExists('getHistoryByModelNameModelId', 'modelName', modelName)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getHistoryByModelNameModelId', 'modelId', modelId)
            const localVarPath = `/history/getHistory/{modelName}/{modelId}`
                .replace(`{${"modelName"}}`, encodeURIComponent(String(modelName)))
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {HistoryRequest} historyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyTitleUpdate: async (brandId: number, historyRequest: HistoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('historyTitleUpdate', 'brandId', brandId)
            // verify required parameter 'historyRequest' is not null or undefined
            assertParamExists('historyTitleUpdate', 'historyRequest', historyRequest)
            const localVarPath = `/history/titleUpdate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(historyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id History ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showHistory: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('showHistory', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showHistory', 'id', id)
            const localVarPath = `/history/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HistoryApi - functional programming interface
 * @export
 */
export const HistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllHistories(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShowHistory200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllHistories(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {string} modelName Model Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoriesByModelName(brandId: number, modelName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShowHistory200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistoriesByModelName(brandId, modelName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {string} modelName Model Name
         * @param {number} modelId Model Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoryByModelNameModelId(brandId: number, modelName: string, modelId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShowHistory200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistoryByModelNameModelId(brandId, modelName, modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {HistoryRequest} historyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async historyTitleUpdate(brandId: number, historyRequest: HistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.historyTitleUpdate(brandId, historyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id History ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showHistory(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShowHistory200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showHistory(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HistoryApi - factory interface
 * @export
 */
export const HistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HistoryApiFp(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHistories(brandId: number, options?: any): AxiosPromise<ShowHistory200Response> {
            return localVarFp.getAllHistories(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {string} modelName Model Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoriesByModelName(brandId: number, modelName: string, options?: any): AxiosPromise<ShowHistory200Response> {
            return localVarFp.getHistoriesByModelName(brandId, modelName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {string} modelName Model Name
         * @param {number} modelId Model Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoryByModelNameModelId(brandId: number, modelName: string, modelId: number, options?: any): AxiosPromise<ShowHistory200Response> {
            return localVarFp.getHistoryByModelNameModelId(brandId, modelName, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {HistoryRequest} historyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyTitleUpdate(brandId: number, historyRequest: HistoryRequest, options?: any): AxiosPromise<any> {
            return localVarFp.historyTitleUpdate(brandId, historyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id History ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showHistory(brandId: number, id: number, options?: any): AxiosPromise<ShowHistory200Response> {
            return localVarFp.showHistory(brandId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HistoryApi - object-oriented interface
 * @export
 * @class HistoryApi
 * @extends {BaseAPI}
 */
export class HistoryApi extends BaseAPI {
    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApi
     */
    public getAllHistories(brandId: number, options?: AxiosRequestConfig) {
        return HistoryApiFp(this.configuration).getAllHistories(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {string} modelName Model Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApi
     */
    public getHistoriesByModelName(brandId: number, modelName: string, options?: AxiosRequestConfig) {
        return HistoryApiFp(this.configuration).getHistoriesByModelName(brandId, modelName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {string} modelName Model Name
     * @param {number} modelId Model Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApi
     */
    public getHistoryByModelNameModelId(brandId: number, modelName: string, modelId: number, options?: AxiosRequestConfig) {
        return HistoryApiFp(this.configuration).getHistoryByModelNameModelId(brandId, modelName, modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {HistoryRequest} historyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApi
     */
    public historyTitleUpdate(brandId: number, historyRequest: HistoryRequest, options?: AxiosRequestConfig) {
        return HistoryApiFp(this.configuration).historyTitleUpdate(brandId, historyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id History ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApi
     */
    public showHistory(brandId: number, id: number, options?: AxiosRequestConfig) {
        return HistoryApiFp(this.configuration).showHistory(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MenuApi - axios parameter creator
 * @export
 */
export const MenuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Menu} menu 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMenu: async (brandId: number, menu: Menu, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('addMenu', 'brandId', brandId)
            // verify required parameter 'menu' is not null or undefined
            assertParamExists('addMenu', 'menu', menu)
            const localVarPath = `/menu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menu, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenu: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('deleteMenu', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMenu', 'id', id)
            const localVarPath = `/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenu: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getMenu', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMenu', 'id', id)
            const localVarPath = `/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuList: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('menuList', 'brandId', brandId)
            const localVarPath = `/menu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Menu ID
         * @param {Menu} menu 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMenu: async (brandId: number, id: number, menu: Menu, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('updateMenu', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMenu', 'id', id)
            // verify required parameter 'menu' is not null or undefined
            assertParamExists('updateMenu', 'menu', menu)
            const localVarPath = `/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menu, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuApi - functional programming interface
 * @export
 */
export const MenuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Menu} menu 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMenu(brandId: number, menu: Menu, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Menu>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMenu(brandId, menu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMenu(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMenu(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenu(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMenu200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMenu(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuList(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuList(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Menu ID
         * @param {Menu} menu 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMenu(brandId: number, id: number, menu: Menu, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Menu>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMenu(brandId, id, menu, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MenuApi - factory interface
 * @export
 */
export const MenuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuApiFp(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Menu} menu 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMenu(brandId: number, menu: Menu, options?: any): AxiosPromise<Menu> {
            return localVarFp.addMenu(brandId, menu, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenu(brandId: number, id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteMenu(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenu(brandId: number, id: number, options?: any): AxiosPromise<GetMenu200Response> {
            return localVarFp.getMenu(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuList(brandId: number, options?: any): AxiosPromise<MenuList200Response> {
            return localVarFp.menuList(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Menu ID
         * @param {Menu} menu 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMenu(brandId: number, id: number, menu: Menu, options?: any): AxiosPromise<Menu> {
            return localVarFp.updateMenu(brandId, id, menu, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuApi - object-oriented interface
 * @export
 * @class MenuApi
 * @extends {BaseAPI}
 */
export class MenuApi extends BaseAPI {
    /**
     * 
     * @param {number} brandId Brand ID
     * @param {Menu} menu 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public addMenu(brandId: number, menu: Menu, options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).addMenu(brandId, menu, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public deleteMenu(brandId: number, id: number, options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).deleteMenu(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public getMenu(brandId: number, id: number, options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).getMenu(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public menuList(brandId: number, options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).menuList(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Menu ID
     * @param {Menu} menu 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public updateMenu(brandId: number, id: number, menu: Menu, options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).updateMenu(brandId, id, menu, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Notification ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotification: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('deleteNotification', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteNotification', 'id', id)
            const localVarPath = `/notification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importNotification: async (brandId: number, notification: Notification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('importNotification', 'brandId', brandId)
            // verify required parameter 'notification' is not null or undefined
            assertParamExists('importNotification', 'notification', notification)
            const localVarPath = `/notification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationList: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('notificationList', 'brandId', brandId)
            const localVarPath = `/notification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Notification ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showNotification: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('showNotification', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showNotification', 'id', id)
            const localVarPath = `/notification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Notification ID
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotification: async (brandId: number, id: number, notification: Notification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('updateNotification', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateNotification', 'id', id)
            // verify required parameter 'notification' is not null or undefined
            assertParamExists('updateNotification', 'notification', notification)
            const localVarPath = `/notification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Notification ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNotification(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNotification(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importNotification(brandId: number, notification: Notification, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importNotification(brandId, notification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationList(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationList(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Notification ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showNotification(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShowNotification200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showNotification(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Notification ID
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNotification(brandId: number, id: number, notification: Notification, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNotification(brandId, id, notification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationApiFp(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Notification ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotification(brandId: number, id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteNotification(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importNotification(brandId: number, notification: Notification, options?: any): AxiosPromise<Notification> {
            return localVarFp.importNotification(brandId, notification, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationList(brandId: number, options?: any): AxiosPromise<NotificationList200Response> {
            return localVarFp.notificationList(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Notification ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showNotification(brandId: number, id: number, options?: any): AxiosPromise<ShowNotification200Response> {
            return localVarFp.showNotification(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Notification ID
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotification(brandId: number, id: number, notification: Notification, options?: any): AxiosPromise<Notification> {
            return localVarFp.updateNotification(brandId, id, notification, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Notification ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public deleteNotification(brandId: number, id: number, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).deleteNotification(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {Notification} notification 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public importNotification(brandId: number, notification: Notification, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).importNotification(brandId, notification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notificationList(brandId: number, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationList(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Notification ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public showNotification(brandId: number, id: number, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).showNotification(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Notification ID
     * @param {Notification} notification 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public updateNotification(brandId: number, id: number, notification: Notification, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).updateNotification(brandId, id, notification, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PIMApi - axios parameter creator
 * @export
 */
export const PIMApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} productId Product Id
         * @param {number} status Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePageStatus: async (productId: number, status: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('changePageStatus', 'productId', productId)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('changePageStatus', 'status', status)
            const localVarPath = `/pim/changeStatus/{productId}/{status}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PIMApi - functional programming interface
 * @export
 */
export const PIMApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PIMApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} productId Product Id
         * @param {number} status Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePageStatus(productId: number, status: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePageStatus(productId, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PIMApi - factory interface
 * @export
 */
export const PIMApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PIMApiFp(configuration)
    return {
        /**
         * 
         * @param {number} productId Product Id
         * @param {number} status Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePageStatus(productId: number, status: number, options?: any): AxiosPromise<any> {
            return localVarFp.changePageStatus(productId, status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PIMApi - object-oriented interface
 * @export
 * @class PIMApi
 * @extends {BaseAPI}
 */
export class PIMApi extends BaseAPI {
    /**
     * 
     * @param {number} productId Product Id
     * @param {number} status Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PIMApi
     */
    public changePageStatus(productId: number, status: number, options?: AxiosRequestConfig) {
        return PIMApiFp(this.configuration).changePageStatus(productId, status, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PageApi - axios parameter creator
 * @export
 */
export const PageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} brandId Brand Id
         * @param {Duplicate} duplicate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _0f917f275a0d5168341cc92753f96732: async (brandId: number, duplicate: Duplicate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('_0f917f275a0d5168341cc92753f96732', 'brandId', brandId)
            // verify required parameter 'duplicate' is not null or undefined
            assertParamExists('_0f917f275a0d5168341cc92753f96732', 'duplicate', duplicate)
            const localVarPath = `/page/duplicate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(duplicate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Page} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPage: async (brandId: number, page: Page, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('addPage', 'brandId', brandId)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('addPage', 'page', page)
            const localVarPath = `/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(page, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('deletePage', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePage', 'id', id)
            const localVarPath = `/page/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployProdDbToStage: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('deployProdDbToStage', 'brandId', brandId)
            const localVarPath = `/page/deployProductionDbToStage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployStageDbToProd: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('deployStageDbToProd', 'brandId', brandId)
            const localVarPath = `/page/deployStageDbToProduction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doDeploy: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('doDeploy', 'brandId', brandId)
            const localVarPath = `/page/doDeploy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forceDeletePage: async (brandId: number, pageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('forceDeletePage', 'brandId', brandId)
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('forceDeletePage', 'pageId', pageId)
            const localVarPath = `/page/forceDelete/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListAllPages: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getListAllPages', 'brandId', brandId)
            const localVarPath = `/page/getSummaryPages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListDynamicPage: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getListDynamicPage', 'brandId', brandId)
            const localVarPath = `/page/getDynamicPages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage: async (brandId: number, pageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getPage', 'brandId', brandId)
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('getPage', 'pageId', pageId)
            const localVarPath = `/page/getPage/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {string} modelType Model Type
         * @param {number} modelId Model Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageByModelTypeModelId: async (brandId: number, modelType: string, modelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getPageByModelTypeModelId', 'brandId', brandId)
            // verify required parameter 'modelType' is not null or undefined
            assertParamExists('getPageByModelTypeModelId', 'modelType', modelType)
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getPageByModelTypeModelId', 'modelId', modelId)
            const localVarPath = `/page/getPage/{modelType}/{modelId}`
                .replace(`{${"modelType"}}`, encodeURIComponent(String(modelType)))
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageDraft: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getPageDraft', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPageDraft', 'id', id)
            const localVarPath = `/page/getPageDraft/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductRoutes: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getProductRoutes', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductRoutes', 'id', id)
            const localVarPath = `/page/getProductRoutes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrashedPage: async (brandId: number, pageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getTrashedPage', 'brandId', brandId)
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('getTrashedPage', 'pageId', pageId)
            const localVarPath = `/page/getTrashedPage/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrashedPages: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getTrashedPages', 'brandId', brandId)
            const localVarPath = `/page/getTrashedPages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lockPage: async (brandId: number, pageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('lockPage', 'brandId', brandId)
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('lockPage', 'pageId', pageId)
            const localVarPath = `/page/lock/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageList: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('pageList', 'brandId', brandId)
            const localVarPath = `/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restorePage: async (brandId: number, pageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('restorePage', 'brandId', brandId)
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('restorePage', 'pageId', pageId)
            const localVarPath = `/page/restorePage/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPage: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('showPage', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showPage', 'id', id)
            const localVarPath = `/page/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unLockPage: async (brandId: number, pageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('unLockPage', 'brandId', brandId)
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('unLockPage', 'pageId', pageId)
            const localVarPath = `/page/unLock/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Page ID
         * @param {Page} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePage: async (brandId: number, id: number, page: Page, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('updatePage', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePage', 'id', id)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('updatePage', 'page', page)
            const localVarPath = `/page/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(page, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {Draft} draft 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePageDraft: async (brandId: number, pageId: number, draft: Draft, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('updatePageDraft', 'brandId', brandId)
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('updatePageDraft', 'pageId', pageId)
            // verify required parameter 'draft' is not null or undefined
            assertParamExists('updatePageDraft', 'draft', draft)
            const localVarPath = `/page/saveDraft/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(draft, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {Widgets} widgets 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePageWidgets: async (brandId: number, pageId: number, widgets: Widgets, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('updatePageWidgets', 'brandId', brandId)
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('updatePageWidgets', 'pageId', pageId)
            // verify required parameter 'widgets' is not null or undefined
            assertParamExists('updatePageWidgets', 'widgets', widgets)
            const localVarPath = `/page/saveWidgets/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(widgets, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageApi - functional programming interface
 * @export
 */
export const PageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand Id
         * @param {Duplicate} duplicate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _0f917f275a0d5168341cc92753f96732(brandId: number, duplicate: Duplicate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Page>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._0f917f275a0d5168341cc92753f96732(brandId, duplicate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Page} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPage(brandId: number, page: Page, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Page>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPage(brandId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePage(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePage(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployProdDbToStage(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployProdDbToStage(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployStageDbToProd(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployStageDbToProd(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doDeploy(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doDeploy(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forceDeletePage(brandId: number, pageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forceDeletePage(brandId, pageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListAllPages(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListDynamicPage200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListAllPages(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListDynamicPage(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListDynamicPage200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListDynamicPage(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPage(brandId: number, pageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPageInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPage(brandId, pageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {string} modelType Model Type
         * @param {number} modelId Model Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPageByModelTypeModelId(brandId: number, modelType: string, modelId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPageInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPageByModelTypeModelId(brandId, modelType, modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPageDraft(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPageDraft200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPageDraft(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductRoutes(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPageInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductRoutes(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrashedPage(brandId: number, pageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPageInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrashedPage(brandId, pageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrashedPages(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListDynamicPage200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrashedPages(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lockPage(brandId: number, pageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lockPage(brandId, pageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageList(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pageList(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restorePage(brandId: number, pageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restorePage(brandId, pageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showPage(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPageInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showPage(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unLockPage(brandId: number, pageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unLockPage(brandId, pageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Page ID
         * @param {Page} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePage(brandId: number, id: number, page: Page, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Page>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePage(brandId, id, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {Draft} draft 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePageDraft(brandId: number, pageId: number, draft: Draft, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePageDraft(brandId, pageId, draft, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {Widgets} widgets 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePageWidgets(brandId: number, pageId: number, widgets: Widgets, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePageWidgets(brandId, pageId, widgets, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PageApi - factory interface
 * @export
 */
export const PageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PageApiFp(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand Id
         * @param {Duplicate} duplicate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _0f917f275a0d5168341cc92753f96732(brandId: number, duplicate: Duplicate, options?: any): AxiosPromise<Page> {
            return localVarFp._0f917f275a0d5168341cc92753f96732(brandId, duplicate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Page} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPage(brandId: number, page: Page, options?: any): AxiosPromise<Page> {
            return localVarFp.addPage(brandId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage(brandId: number, id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deletePage(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployProdDbToStage(brandId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deployProdDbToStage(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployStageDbToProd(brandId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deployStageDbToProd(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doDeploy(brandId: number, options?: any): AxiosPromise<any> {
            return localVarFp.doDeploy(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forceDeletePage(brandId: number, pageId: number, options?: any): AxiosPromise<any> {
            return localVarFp.forceDeletePage(brandId, pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListAllPages(brandId: number, options?: any): AxiosPromise<GetListDynamicPage200Response> {
            return localVarFp.getListAllPages(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListDynamicPage(brandId: number, options?: any): AxiosPromise<GetListDynamicPage200Response> {
            return localVarFp.getListDynamicPage(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage(brandId: number, pageId: number, options?: any): AxiosPromise<GetPageInfo200Response> {
            return localVarFp.getPage(brandId, pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {string} modelType Model Type
         * @param {number} modelId Model Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageByModelTypeModelId(brandId: number, modelType: string, modelId: number, options?: any): AxiosPromise<GetPageInfo200Response> {
            return localVarFp.getPageByModelTypeModelId(brandId, modelType, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageDraft(brandId: number, id: number, options?: any): AxiosPromise<GetPageDraft200Response> {
            return localVarFp.getPageDraft(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductRoutes(brandId: number, id: number, options?: any): AxiosPromise<GetPageInfo200Response> {
            return localVarFp.getProductRoutes(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrashedPage(brandId: number, pageId: number, options?: any): AxiosPromise<GetPageInfo200Response> {
            return localVarFp.getTrashedPage(brandId, pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrashedPages(brandId: number, options?: any): AxiosPromise<GetListDynamicPage200Response> {
            return localVarFp.getTrashedPages(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lockPage(brandId: number, pageId: number, options?: any): AxiosPromise<any> {
            return localVarFp.lockPage(brandId, pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageList(brandId: number, options?: any): AxiosPromise<PageList200Response> {
            return localVarFp.pageList(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restorePage(brandId: number, pageId: number, options?: any): AxiosPromise<any> {
            return localVarFp.restorePage(brandId, pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPage(brandId: number, id: number, options?: any): AxiosPromise<GetPageInfo200Response> {
            return localVarFp.showPage(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unLockPage(brandId: number, pageId: number, options?: any): AxiosPromise<any> {
            return localVarFp.unLockPage(brandId, pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Page ID
         * @param {Page} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePage(brandId: number, id: number, page: Page, options?: any): AxiosPromise<Page> {
            return localVarFp.updatePage(brandId, id, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {Draft} draft 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePageDraft(brandId: number, pageId: number, draft: Draft, options?: any): AxiosPromise<any> {
            return localVarFp.updatePageDraft(brandId, pageId, draft, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {Widgets} widgets 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePageWidgets(brandId: number, pageId: number, widgets: Widgets, options?: any): AxiosPromise<any> {
            return localVarFp.updatePageWidgets(brandId, pageId, widgets, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PageApi - object-oriented interface
 * @export
 * @class PageApi
 * @extends {BaseAPI}
 */
export class PageApi extends BaseAPI {
    /**
     * 
     * @param {number} brandId Brand Id
     * @param {Duplicate} duplicate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public _0f917f275a0d5168341cc92753f96732(brandId: number, duplicate: Duplicate, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration)._0f917f275a0d5168341cc92753f96732(brandId, duplicate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {Page} page 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public addPage(brandId: number, page: Page, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).addPage(brandId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Page ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public deletePage(brandId: number, id: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).deletePage(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public deployProdDbToStage(brandId: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).deployProdDbToStage(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public deployStageDbToProd(brandId: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).deployStageDbToProd(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public doDeploy(brandId: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).doDeploy(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} pageId Page ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public forceDeletePage(brandId: number, pageId: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).forceDeletePage(brandId, pageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getListAllPages(brandId: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).getListAllPages(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getListDynamicPage(brandId: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).getListDynamicPage(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} pageId Page ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getPage(brandId: number, pageId: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).getPage(brandId, pageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {string} modelType Model Type
     * @param {number} modelId Model Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getPageByModelTypeModelId(brandId: number, modelType: string, modelId: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).getPageByModelTypeModelId(brandId, modelType, modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Page ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getPageDraft(brandId: number, id: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).getPageDraft(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getProductRoutes(brandId: number, id: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).getProductRoutes(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} pageId Page ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getTrashedPage(brandId: number, pageId: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).getTrashedPage(brandId, pageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getTrashedPages(brandId: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).getTrashedPages(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} pageId Page ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public lockPage(brandId: number, pageId: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).lockPage(brandId, pageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public pageList(brandId: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).pageList(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} pageId Page ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public restorePage(brandId: number, pageId: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).restorePage(brandId, pageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Page ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public showPage(brandId: number, id: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).showPage(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} pageId Page ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public unLockPage(brandId: number, pageId: number, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).unLockPage(brandId, pageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Page ID
     * @param {Page} page 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public updatePage(brandId: number, id: number, page: Page, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).updatePage(brandId, id, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} pageId Page ID
     * @param {Draft} draft 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public updatePageDraft(brandId: number, pageId: number, draft: Draft, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).updatePageDraft(brandId, pageId, draft, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} pageId Page ID
     * @param {Widgets} widgets 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public updatePageWidgets(brandId: number, pageId: number, widgets: Widgets, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).updatePageWidgets(brandId, pageId, widgets, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PostApi - axios parameter creator
 * @export
 */
export const PostApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Post} post 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPost: async (brandId: number, post: Post, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('addPost', 'brandId', brandId)
            // verify required parameter 'post' is not null or undefined
            assertParamExists('addPost', 'post', post)
            const localVarPath = `/post`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(post, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('deletePost', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePost', 'id', id)
            const localVarPath = `/post/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getPost', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPost', 'id', id)
            const localVarPath = `/post/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} categoryId Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostsByCategoryId: async (brandId: number, categoryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getPostsByCategoryId', 'brandId', brandId)
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getPostsByCategoryId', 'categoryId', categoryId)
            const localVarPath = `/post/getPostsByCategoryId/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postList: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('postList', 'brandId', brandId)
            const localVarPath = `/post`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Post ID
         * @param {Post} post 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost: async (brandId: number, id: number, post: Post, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('updatePost', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePost', 'id', id)
            // verify required parameter 'post' is not null or undefined
            assertParamExists('updatePost', 'post', post)
            const localVarPath = `/post/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(post, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostApi - functional programming interface
 * @export
 */
export const PostApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Post} post 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPost(brandId: number, post: Post, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPost(brandId, post, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePost(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPost(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostById200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPost(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} categoryId Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostsByCategoryId(brandId: number, categoryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostsByCategoryId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostsByCategoryId(brandId, categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postList(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postList(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Post ID
         * @param {Post} post 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePost(brandId: number, id: number, post: Post, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePost(brandId, id, post, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostApi - factory interface
 * @export
 */
export const PostApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostApiFp(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Post} post 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPost(brandId: number, post: Post, options?: any): AxiosPromise<Post> {
            return localVarFp.addPost(brandId, post, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(brandId: number, id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deletePost(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost(brandId: number, id: number, options?: any): AxiosPromise<GetPostById200Response> {
            return localVarFp.getPost(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} categoryId Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostsByCategoryId(brandId: number, categoryId: number, options?: any): AxiosPromise<GetPostsByCategoryId200Response> {
            return localVarFp.getPostsByCategoryId(brandId, categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postList(brandId: number, options?: any): AxiosPromise<PostList200Response> {
            return localVarFp.postList(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Post ID
         * @param {Post} post 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost(brandId: number, id: number, post: Post, options?: any): AxiosPromise<Post> {
            return localVarFp.updatePost(brandId, id, post, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostApi - object-oriented interface
 * @export
 * @class PostApi
 * @extends {BaseAPI}
 */
export class PostApi extends BaseAPI {
    /**
     * 
     * @param {number} brandId Brand ID
     * @param {Post} post 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public addPost(brandId: number, post: Post, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).addPost(brandId, post, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public deletePost(brandId: number, id: number, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).deletePost(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public getPost(brandId: number, id: number, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).getPost(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} categoryId Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public getPostsByCategoryId(brandId: number, categoryId: number, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).getPostsByCategoryId(brandId, categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postList(brandId: number, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postList(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Post ID
     * @param {Post} post 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public updatePost(brandId: number, id: number, post: Post, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).updatePost(brandId, id, post, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Product} product 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProduct: async (product: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'product' is not null or undefined
            assertParamExists('addProduct', 'product', product)
            const localVarPath = `/product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(product, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProduct', 'id', id)
            const localVarPath = `/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProduct', 'id', id)
            const localVarPath = `/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Product ID
         * @param {Product} product 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (id: number, product: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateProduct', 'id', id)
            // verify required parameter 'product' is not null or undefined
            assertParamExists('updateProduct', 'product', product)
            const localVarPath = `/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(product, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Product} product 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProduct(product: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProduct(product, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProductInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProductList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Product ID
         * @param {Product} product 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(id: number, product: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(id, product, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @param {Product} product 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProduct(product: Product, options?: any): AxiosPromise<Product> {
            return localVarFp.addProduct(product, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteProduct(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct(id: number, options?: any): AxiosPromise<GetProductInfo200Response> {
            return localVarFp.getProduct(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productList(options?: any): AxiosPromise<GetProductList200Response> {
            return localVarFp.productList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Product ID
         * @param {Product} product 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(id: number, product: Product, options?: any): AxiosPromise<Product> {
            return localVarFp.updateProduct(id, product, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @param {Product} product 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public addProduct(product: Product, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).addProduct(product, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public deleteProduct(id: number, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).deleteProduct(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProduct(id: number, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).getProduct(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productList(options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Product ID
     * @param {Product} product 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public updateProduct(id: number, product: Product, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).updateProduct(id, product, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RedirectApi - axios parameter creator
 * @export
 */
export const RedirectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Redirect} redirect 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRedirect: async (brandId: number, redirect: Redirect, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('addRedirect', 'brandId', brandId)
            // verify required parameter 'redirect' is not null or undefined
            assertParamExists('addRedirect', 'redirect', redirect)
            const localVarPath = `/redirect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(redirect, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Redirect ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRedirect: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('deleteRedirect', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRedirect', 'id', id)
            const localVarPath = `/redirect/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Redirect ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirect: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getRedirect', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRedirect', 'id', id)
            const localVarPath = `/redirect/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirectsByPageId: async (brandId: number, pageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getRedirectsByPageId', 'brandId', brandId)
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('getRedirectsByPageId', 'pageId', pageId)
            const localVarPath = `/redirect/getRedirects/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redirectList: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('redirectList', 'brandId', brandId)
            const localVarPath = `/redirect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Redirect ID
         * @param {Redirect} redirect 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRedirect: async (brandId: number, id: number, redirect: Redirect, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('updateRedirect', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRedirect', 'id', id)
            // verify required parameter 'redirect' is not null or undefined
            assertParamExists('updateRedirect', 'redirect', redirect)
            const localVarPath = `/redirect/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(redirect, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RedirectApi - functional programming interface
 * @export
 */
export const RedirectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RedirectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Redirect} redirect 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRedirect(brandId: number, redirect: Redirect, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Redirect>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRedirect(brandId, redirect, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Redirect ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRedirect(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRedirect(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Redirect ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRedirect(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRedirect200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRedirect(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRedirectsByPageId(brandId: number, pageId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRedirect200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRedirectsByPageId(brandId, pageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redirectList(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRedirectList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redirectList(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Redirect ID
         * @param {Redirect} redirect 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRedirect(brandId: number, id: number, redirect: Redirect, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Redirect>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRedirect(brandId, id, redirect, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RedirectApi - factory interface
 * @export
 */
export const RedirectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RedirectApiFp(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Redirect} redirect 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRedirect(brandId: number, redirect: Redirect, options?: any): AxiosPromise<Redirect> {
            return localVarFp.addRedirect(brandId, redirect, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Redirect ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRedirect(brandId: number, id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteRedirect(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Redirect ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirect(brandId: number, id: number, options?: any): AxiosPromise<GetRedirect200Response> {
            return localVarFp.getRedirect(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} pageId Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirectsByPageId(brandId: number, pageId: number, options?: any): AxiosPromise<GetRedirect200Response> {
            return localVarFp.getRedirectsByPageId(brandId, pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redirectList(brandId: number, options?: any): AxiosPromise<GetRedirectList200Response> {
            return localVarFp.redirectList(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Redirect ID
         * @param {Redirect} redirect 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRedirect(brandId: number, id: number, redirect: Redirect, options?: any): AxiosPromise<Redirect> {
            return localVarFp.updateRedirect(brandId, id, redirect, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RedirectApi - object-oriented interface
 * @export
 * @class RedirectApi
 * @extends {BaseAPI}
 */
export class RedirectApi extends BaseAPI {
    /**
     * 
     * @param {number} brandId Brand ID
     * @param {Redirect} redirect 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectApi
     */
    public addRedirect(brandId: number, redirect: Redirect, options?: AxiosRequestConfig) {
        return RedirectApiFp(this.configuration).addRedirect(brandId, redirect, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Redirect ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectApi
     */
    public deleteRedirect(brandId: number, id: number, options?: AxiosRequestConfig) {
        return RedirectApiFp(this.configuration).deleteRedirect(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Redirect ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectApi
     */
    public getRedirect(brandId: number, id: number, options?: AxiosRequestConfig) {
        return RedirectApiFp(this.configuration).getRedirect(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} pageId Page ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectApi
     */
    public getRedirectsByPageId(brandId: number, pageId: number, options?: AxiosRequestConfig) {
        return RedirectApiFp(this.configuration).getRedirectsByPageId(brandId, pageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectApi
     */
    public redirectList(brandId: number, options?: AxiosRequestConfig) {
        return RedirectApiFp(this.configuration).redirectList(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Redirect ID
     * @param {Redirect} redirect 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedirectApi
     */
    public updateRedirect(brandId: number, id: number, redirect: Redirect, options?: AxiosRequestConfig) {
        return RedirectApiFp(this.configuration).updateRedirect(brandId, id, redirect, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RegionApi - axios parameter creator
 * @export
 */
export const RegionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Region} region 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRegion: async (region: Region, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'region' is not null or undefined
            assertParamExists('addRegion', 'region', region)
            const localVarPath = `/region`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(region, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRegion: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRegion', 'id', id)
            const localVarPath = `/region/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBySiteId: async (siteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteId' is not null or undefined
            assertParamExists('getBySiteId', 'siteId', siteId)
            const localVarPath = `/region/getBySiteId/{siteId}`
                .replace(`{${"siteId"}}`, encodeURIComponent(String(siteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegion: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRegion', 'id', id)
            const localVarPath = `/region/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/region`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {Region} region 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegion: async (id: number, region: Region, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRegion', 'id', id)
            // verify required parameter 'region' is not null or undefined
            assertParamExists('updateRegion', 'region', region)
            const localVarPath = `/region/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(region, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegionApi - functional programming interface
 * @export
 */
export const RegionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Region} region 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRegion(region: Region, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRegion(region, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRegion(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRegion(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBySiteId(siteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRegions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBySiteId(siteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegion(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRegion200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegion(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRegionList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regionList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {Region} region 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRegion(id: number, region: Region, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRegion(id, region, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegionApi - factory interface
 * @export
 */
export const RegionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegionApiFp(configuration)
    return {
        /**
         * 
         * @param {Region} region 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRegion(region: Region, options?: any): AxiosPromise<Region> {
            return localVarFp.addRegion(region, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRegion(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteRegion(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBySiteId(siteId: number, options?: any): AxiosPromise<GetRegions200Response> {
            return localVarFp.getBySiteId(siteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegion(id: number, options?: any): AxiosPromise<GetRegion200Response> {
            return localVarFp.getRegion(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionList(options?: any): AxiosPromise<GetRegionList200Response> {
            return localVarFp.regionList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Region ID
         * @param {Region} region 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegion(id: number, region: Region, options?: any): AxiosPromise<Region> {
            return localVarFp.updateRegion(id, region, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegionApi - object-oriented interface
 * @export
 * @class RegionApi
 * @extends {BaseAPI}
 */
export class RegionApi extends BaseAPI {
    /**
     * 
     * @param {Region} region 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionApi
     */
    public addRegion(region: Region, options?: AxiosRequestConfig) {
        return RegionApiFp(this.configuration).addRegion(region, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Region ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionApi
     */
    public deleteRegion(id: number, options?: AxiosRequestConfig) {
        return RegionApiFp(this.configuration).deleteRegion(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} siteId Site ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionApi
     */
    public getBySiteId(siteId: number, options?: AxiosRequestConfig) {
        return RegionApiFp(this.configuration).getBySiteId(siteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Region ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionApi
     */
    public getRegion(id: number, options?: AxiosRequestConfig) {
        return RegionApiFp(this.configuration).getRegion(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionApi
     */
    public regionList(options?: AxiosRequestConfig) {
        return RegionApiFp(this.configuration).regionList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Region ID
     * @param {Region} region 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionApi
     */
    public updateRegion(id: number, region: Region, options?: AxiosRequestConfig) {
        return RegionApiFp(this.configuration).updateRegion(id, region, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RuleApi - axios parameter creator
 * @export
 */
export const RuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Rule} rule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRules: async (rule: Rule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rule' is not null or undefined
            assertParamExists('addRules', 'rule', rule)
            const localVarPath = `/rule/addRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rule, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRule: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRule', 'id', id)
            const localVarPath = `/rule/deleteRules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRule: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRule', 'id', id)
            const localVarPath = `/rule/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRules: async (siteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteId' is not null or undefined
            assertParamExists('getRules', 'siteId', siteId)
            const localVarPath = `/rule/getRules/{siteId}`
                .replace(`{${"siteId"}}`, encodeURIComponent(String(siteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rulesList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {Rule} rule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRules: async (id: number, rule: Rule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRules', 'id', id)
            // verify required parameter 'rule' is not null or undefined
            assertParamExists('updateRules', 'rule', rule)
            const localVarPath = `/rule/updateRules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rule, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RuleApi - functional programming interface
 * @export
 */
export const RuleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RuleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Rule} rule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRules(rule: Rule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRules(rule, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRule(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRule(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRule(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRule200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRule(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRules(siteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRulesBySiteId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRules(siteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rulesList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRulesBySiteId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rulesList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {Rule} rule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRules(id: number, rule: Rule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRules(id, rule, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RuleApi - factory interface
 * @export
 */
export const RuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RuleApiFp(configuration)
    return {
        /**
         * 
         * @param {Rule} rule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRules(rule: Rule, options?: any): AxiosPromise<Rule> {
            return localVarFp.addRules(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRule(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteRule(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRule(id: number, options?: any): AxiosPromise<GetRule200Response> {
            return localVarFp.getRule(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRules(siteId: number, options?: any): AxiosPromise<GetRulesBySiteId200Response> {
            return localVarFp.getRules(siteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rulesList(options?: any): AxiosPromise<GetRulesBySiteId200Response> {
            return localVarFp.rulesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Rule ID
         * @param {Rule} rule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRules(id: number, rule: Rule, options?: any): AxiosPromise<Rule> {
            return localVarFp.updateRules(id, rule, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RuleApi - object-oriented interface
 * @export
 * @class RuleApi
 * @extends {BaseAPI}
 */
export class RuleApi extends BaseAPI {
    /**
     * 
     * @param {Rule} rule 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public addRules(rule: Rule, options?: AxiosRequestConfig) {
        return RuleApiFp(this.configuration).addRules(rule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Rule ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public deleteRule(id: number, options?: AxiosRequestConfig) {
        return RuleApiFp(this.configuration).deleteRule(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Rule ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public getRule(id: number, options?: AxiosRequestConfig) {
        return RuleApiFp(this.configuration).getRule(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} siteId Site ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public getRules(siteId: number, options?: AxiosRequestConfig) {
        return RuleApiFp(this.configuration).getRules(siteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public rulesList(options?: AxiosRequestConfig) {
        return RuleApiFp(this.configuration).rulesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Rule ID
     * @param {Rule} rule 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public updateRules(id: number, rule: Rule, options?: AxiosRequestConfig) {
        return RuleApiFp(this.configuration).updateRules(id, rule, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SectionApi - axios parameter creator
 * @export
 */
export const SectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Section} section 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSection: async (section: Section, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'section' is not null or undefined
            assertParamExists('addSection', 'section', section)
            const localVarPath = `/section`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(section, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Section ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSection: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSection', 'id', id)
            const localVarPath = `/section/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Section ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSection: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSection', 'id', id)
            const localVarPath = `/section/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sectionList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/section`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Section ID
         * @param {Section} section 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSection: async (id: number, section: Section, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSection', 'id', id)
            // verify required parameter 'section' is not null or undefined
            assertParamExists('updateSection', 'section', section)
            const localVarPath = `/section/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(section, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SectionApi - functional programming interface
 * @export
 */
export const SectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SectionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Section} section 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSection(section: Section, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Section>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSection(section, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Section ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSection(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSection(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Section ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSection(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSection(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sectionList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sectionList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Section ID
         * @param {Section} section 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSection(id: number, section: Section, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Section>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSection(id, section, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SectionApi - factory interface
 * @export
 */
export const SectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SectionApiFp(configuration)
    return {
        /**
         * 
         * @param {Section} section 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSection(section: Section, options?: any): AxiosPromise<Section> {
            return localVarFp.addSection(section, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Section ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSection(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteSection(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Section ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSection(id: number, options?: any): AxiosPromise<GetSection200Response> {
            return localVarFp.getSection(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sectionList(options?: any): AxiosPromise<SectionList200Response> {
            return localVarFp.sectionList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Section ID
         * @param {Section} section 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSection(id: number, section: Section, options?: any): AxiosPromise<Section> {
            return localVarFp.updateSection(id, section, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SectionApi - object-oriented interface
 * @export
 * @class SectionApi
 * @extends {BaseAPI}
 */
export class SectionApi extends BaseAPI {
    /**
     * 
     * @param {Section} section 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionApi
     */
    public addSection(section: Section, options?: AxiosRequestConfig) {
        return SectionApiFp(this.configuration).addSection(section, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Section ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionApi
     */
    public deleteSection(id: number, options?: AxiosRequestConfig) {
        return SectionApiFp(this.configuration).deleteSection(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Section ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionApi
     */
    public getSection(id: number, options?: AxiosRequestConfig) {
        return SectionApiFp(this.configuration).getSection(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionApi
     */
    public sectionList(options?: AxiosRequestConfig) {
        return SectionApiFp(this.configuration).sectionList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Section ID
     * @param {Section} section 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionApi
     */
    public updateSection(id: number, section: Section, options?: AxiosRequestConfig) {
        return SectionApiFp(this.configuration).updateSection(id, section, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SettingApi - axios parameter creator
 * @export
 */
export const SettingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {AddSettingRequest} addSettingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSetting: async (brandId: number, addSettingRequest: AddSettingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('addSetting', 'brandId', brandId)
            // verify required parameter 'addSettingRequest' is not null or undefined
            assertParamExists('addSetting', 'addSettingRequest', addSettingRequest)
            const localVarPath = `/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addSettingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Setting ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSetting: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('deleteSetting', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSetting', 'id', id)
            const localVarPath = `/setting/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Setting ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSetting: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getSetting', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSetting', 'id', id)
            const localVarPath = `/setting/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingList: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('settingList', 'brandId', brandId)
            const localVarPath = `/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Setting ID
         * @param {Setting} setting 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSetting: async (brandId: number, id: number, setting: Setting, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('updateSetting', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSetting', 'id', id)
            // verify required parameter 'setting' is not null or undefined
            assertParamExists('updateSetting', 'setting', setting)
            const localVarPath = `/setting/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setting, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingApi - functional programming interface
 * @export
 */
export const SettingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {AddSettingRequest} addSettingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSetting(brandId: number, addSettingRequest: AddSettingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddSetting201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSetting(brandId, addSettingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Setting ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSetting(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSetting(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Setting ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSetting(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSetting200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSetting(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingList(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSettingList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingList(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Setting ID
         * @param {Setting} setting 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSetting(brandId: number, id: number, setting: Setting, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Setting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSetting(brandId, id, setting, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SettingApi - factory interface
 * @export
 */
export const SettingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingApiFp(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {AddSettingRequest} addSettingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSetting(brandId: number, addSettingRequest: AddSettingRequest, options?: any): AxiosPromise<AddSetting201Response> {
            return localVarFp.addSetting(brandId, addSettingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Setting ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSetting(brandId: number, id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteSetting(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Setting ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSetting(brandId: number, id: number, options?: any): AxiosPromise<GetSetting200Response> {
            return localVarFp.getSetting(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingList(brandId: number, options?: any): AxiosPromise<GetSettingList200Response> {
            return localVarFp.settingList(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Setting ID
         * @param {Setting} setting 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSetting(brandId: number, id: number, setting: Setting, options?: any): AxiosPromise<Setting> {
            return localVarFp.updateSetting(brandId, id, setting, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingApi - object-oriented interface
 * @export
 * @class SettingApi
 * @extends {BaseAPI}
 */
export class SettingApi extends BaseAPI {
    /**
     * 
     * @param {number} brandId Brand ID
     * @param {AddSettingRequest} addSettingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingApi
     */
    public addSetting(brandId: number, addSettingRequest: AddSettingRequest, options?: AxiosRequestConfig) {
        return SettingApiFp(this.configuration).addSetting(brandId, addSettingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Setting ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingApi
     */
    public deleteSetting(brandId: number, id: number, options?: AxiosRequestConfig) {
        return SettingApiFp(this.configuration).deleteSetting(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Setting ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingApi
     */
    public getSetting(brandId: number, id: number, options?: AxiosRequestConfig) {
        return SettingApiFp(this.configuration).getSetting(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingApi
     */
    public settingList(brandId: number, options?: AxiosRequestConfig) {
        return SettingApiFp(this.configuration).settingList(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Setting ID
     * @param {Setting} setting 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingApi
     */
    public updateSetting(brandId: number, id: number, setting: Setting, options?: AxiosRequestConfig) {
        return SettingApiFp(this.configuration).updateSetting(brandId, id, setting, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SiteApi - axios parameter creator
 * @export
 */
export const SiteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Site} site 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSite: async (site: Site, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'site' is not null or undefined
            assertParamExists('addSite', 'site', site)
            const localVarPath = `/site`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(site, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSite: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSite', 'id', id)
            const localVarPath = `/site/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSite: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSite', 'id', id)
            const localVarPath = `/site/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteStatus: async (siteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteId' is not null or undefined
            assertParamExists('getSiteStatus', 'siteId', siteId)
            const localVarPath = `/site/getSiteStatus/{siteId}`
                .replace(`{${"siteId"}}`, encodeURIComponent(String(siteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} siteId site Id
         * @param {number} status status: Enable&#x3D;1, Disable&#x3D;0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSiteStatus: async (siteId: number, status: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteId' is not null or undefined
            assertParamExists('setSiteStatus', 'siteId', siteId)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('setSiteStatus', 'status', status)
            const localVarPath = `/site/setSiteStatus/{siteId}/{status}`
                .replace(`{${"siteId"}}`, encodeURIComponent(String(siteId)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/site`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {Site} site 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSite: async (id: number, site: Site, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSite', 'id', id)
            // verify required parameter 'site' is not null or undefined
            assertParamExists('updateSite', 'site', site)
            const localVarPath = `/site/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(site, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SiteApi - functional programming interface
 * @export
 */
export const SiteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SiteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Site} site 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSite(site: Site, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Site>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSite(site, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSite(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSite(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSite(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSite200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSite(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSiteStatus(siteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSite200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSiteStatus(siteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} siteId site Id
         * @param {number} status status: Enable&#x3D;1, Disable&#x3D;0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setSiteStatus(siteId: number, status: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setSiteStatus(siteId, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSiteList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {Site} site 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSite(id: number, site: Site, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Site>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSite(id, site, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SiteApi - factory interface
 * @export
 */
export const SiteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SiteApiFp(configuration)
    return {
        /**
         * 
         * @param {Site} site 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSite(site: Site, options?: any): AxiosPromise<Site> {
            return localVarFp.addSite(site, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSite(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteSite(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSite(id: number, options?: any): AxiosPromise<GetSite200Response> {
            return localVarFp.getSite(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} siteId Site ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteStatus(siteId: number, options?: any): AxiosPromise<GetSite200Response> {
            return localVarFp.getSiteStatus(siteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} siteId site Id
         * @param {number} status status: Enable&#x3D;1, Disable&#x3D;0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSiteStatus(siteId: number, status: number, options?: any): AxiosPromise<any> {
            return localVarFp.setSiteStatus(siteId, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteList(options?: any): AxiosPromise<GetSiteList200Response> {
            return localVarFp.siteList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id Site ID
         * @param {Site} site 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSite(id: number, site: Site, options?: any): AxiosPromise<Site> {
            return localVarFp.updateSite(id, site, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SiteApi - object-oriented interface
 * @export
 * @class SiteApi
 * @extends {BaseAPI}
 */
export class SiteApi extends BaseAPI {
    /**
     * 
     * @param {Site} site 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public addSite(site: Site, options?: AxiosRequestConfig) {
        return SiteApiFp(this.configuration).addSite(site, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Site ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public deleteSite(id: number, options?: AxiosRequestConfig) {
        return SiteApiFp(this.configuration).deleteSite(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Site ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public getSite(id: number, options?: AxiosRequestConfig) {
        return SiteApiFp(this.configuration).getSite(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} siteId Site ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public getSiteStatus(siteId: number, options?: AxiosRequestConfig) {
        return SiteApiFp(this.configuration).getSiteStatus(siteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} siteId site Id
     * @param {number} status status: Enable&#x3D;1, Disable&#x3D;0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public setSiteStatus(siteId: number, status: number, options?: AxiosRequestConfig) {
        return SiteApiFp(this.configuration).setSiteStatus(siteId, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public siteList(options?: AxiosRequestConfig) {
        return SiteApiFp(this.configuration).siteList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id Site ID
     * @param {Site} site 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiteApi
     */
    public updateSite(id: number, site: Site, options?: AxiosRequestConfig) {
        return SiteApiFp(this.configuration).updateSite(id, site, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Status ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _828944b026e392e8a9d24e0e25d6ffed: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('_828944b026e392e8a9d24e0e25d6ffed', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_828944b026e392e8a9d24e0e25d6ffed', 'id', id)
            const localVarPath = `/status/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cf600ec9f1950b8dd71b7f1dc100d49d: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('cf600ec9f1950b8dd71b7f1dc100d49d', 'brandId', brandId)
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Status ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _828944b026e392e8a9d24e0e25d6ffed(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model828944b026e392e8a9d24e0e25d6ffed200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._828944b026e392e8a9d24e0e25d6ffed(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cf600ec9f1950b8dd71b7f1dc100d49d(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cf600ec9f1950b8dd71b7f1dc100d49d200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cf600ec9f1950b8dd71b7f1dc100d49d(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatusApiFp(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Status ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _828944b026e392e8a9d24e0e25d6ffed(brandId: number, id: number, options?: any): AxiosPromise<Model828944b026e392e8a9d24e0e25d6ffed200Response> {
            return localVarFp._828944b026e392e8a9d24e0e25d6ffed(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cf600ec9f1950b8dd71b7f1dc100d49d(brandId: number, options?: any): AxiosPromise<Cf600ec9f1950b8dd71b7f1dc100d49d200Response> {
            return localVarFp.cf600ec9f1950b8dd71b7f1dc100d49d(brandId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI {
    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Status ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public _828944b026e392e8a9d24e0e25d6ffed(brandId: number, id: number, options?: AxiosRequestConfig) {
        return StatusApiFp(this.configuration)._828944b026e392e8a9d24e0e25d6ffed(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public cf600ec9f1950b8dd71b7f1dc100d49d(brandId: number, options?: AxiosRequestConfig) {
        return StatusApiFp(this.configuration).cf600ec9f1950b8dd71b7f1dc100d49d(brandId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TemplateApi - axios parameter creator
 * @export
 */
export const TemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Template} template 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTemplate: async (brandId: number, template: Template, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('addTemplate', 'brandId', brandId)
            // verify required parameter 'template' is not null or undefined
            assertParamExists('addTemplate', 'template', template)
            const localVarPath = `/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(template, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Template ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('deleteTemplate', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTemplate', 'id', id)
            const localVarPath = `/template/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Template ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplate: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('getTemplate', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTemplate', 'id', id)
            const localVarPath = `/template/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateList: async (brandId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('templateList', 'brandId', brandId)
            const localVarPath = `/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Template ID
         * @param {Template} template 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate: async (brandId: number, id: number, template: Template, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('updateTemplate', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTemplate', 'id', id)
            // verify required parameter 'template' is not null or undefined
            assertParamExists('updateTemplate', 'template', template)
            const localVarPath = `/template/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(template, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplateApi - functional programming interface
 * @export
 */
export const TemplateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Template} template 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTemplate(brandId: number, template: Template, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Template>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTemplate(brandId, template, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Template ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTemplate(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTemplate(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Template ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTemplate(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTemplateInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTemplate(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateList(brandId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateList(brandId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Template ID
         * @param {Template} template 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTemplate(brandId: number, id: number, template: Template, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Template>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTemplate(brandId, id, template, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplateApi - factory interface
 * @export
 */
export const TemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplateApiFp(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {Template} template 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTemplate(brandId: number, template: Template, options?: any): AxiosPromise<Template> {
            return localVarFp.addTemplate(brandId, template, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Template ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(brandId: number, id: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteTemplate(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Template ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplate(brandId: number, id: number, options?: any): AxiosPromise<GetTemplateInfo200Response> {
            return localVarFp.getTemplate(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateList(brandId: number, options?: any): AxiosPromise<TemplateList200Response> {
            return localVarFp.templateList(brandId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Template ID
         * @param {Template} template 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate(brandId: number, id: number, template: Template, options?: any): AxiosPromise<Template> {
            return localVarFp.updateTemplate(brandId, id, template, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TemplateApi - object-oriented interface
 * @export
 * @class TemplateApi
 * @extends {BaseAPI}
 */
export class TemplateApi extends BaseAPI {
    /**
     * 
     * @param {number} brandId Brand ID
     * @param {Template} template 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public addTemplate(brandId: number, template: Template, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).addTemplate(brandId, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Template ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public deleteTemplate(brandId: number, id: number, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).deleteTemplate(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Template ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public getTemplate(brandId: number, id: number, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).getTemplate(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public templateList(brandId: number, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).templateList(brandId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Template ID
     * @param {Template} template 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public updateTemplate(brandId: number, id: number, template: Template, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).updateTemplate(brandId, id, template, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _7da359d7c1bf0aabba6769f3caaf5534: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('_7da359d7c1bf0aabba6769f3caaf5534', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_7da359d7c1bf0aabba6769f3caaf5534', 'id', id)
            const localVarPath = `/test/destroyPost/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a574b3c3f0299134bca9254b82b513b6: async (brandId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('a574b3c3f0299134bca9254b82b513b6', 'brandId', brandId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('a574b3c3f0299134bca9254b82b513b6', 'id', id)
            const localVarPath = `/test/destroyPage/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (brandId != null) {
                localVarHeaderParameter['BrandId'] = typeof brandId === 'string' 
                    ? brandId 
                    : JSON.stringify(brandId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _7da359d7c1bf0aabba6769f3caaf5534(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._7da359d7c1bf0aabba6769f3caaf5534(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async a574b3c3f0299134bca9254b82b513b6(brandId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.a574b3c3f0299134bca9254b82b513b6(brandId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestApiFp(configuration)
    return {
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _7da359d7c1bf0aabba6769f3caaf5534(brandId: number, id: number, options?: any): AxiosPromise<any> {
            return localVarFp._7da359d7c1bf0aabba6769f3caaf5534(brandId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} brandId Brand ID
         * @param {number} id Page ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a574b3c3f0299134bca9254b82b513b6(brandId: number, id: number, options?: any): AxiosPromise<any> {
            return localVarFp.a574b3c3f0299134bca9254b82b513b6(brandId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public _7da359d7c1bf0aabba6769f3caaf5534(brandId: number, id: number, options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration)._7da359d7c1bf0aabba6769f3caaf5534(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} brandId Brand ID
     * @param {number} id Page ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public a574b3c3f0299134bca9254b82b513b6(brandId: number, id: number, options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).a574b3c3f0299134bca9254b82b513b6(brandId, id, options).then((request) => request(this.axios, this.basePath));
    }
}


